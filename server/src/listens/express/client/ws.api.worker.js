(()=>{var e={6680:e=>{var t=1e3,s=60*t,r=60*s,n=24*r;function i(e,t,s,r){var n=t>=1.5*s;return Math.round(e/s)+" "+r+(n?"s":"")}e.exports=function(e,o){o=o||{};var a,u,c=typeof e;if("string"===c&&e.length>0)return function(e){if(!((e=String(e)).length>100)){var i=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);if(i){var o=parseFloat(i[1]);switch((i[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return 315576e5*o;case"weeks":case"week":case"w":return 6048e5*o;case"days":case"day":case"d":return o*n;case"hours":case"hour":case"hrs":case"hr":case"h":return o*r;case"minutes":case"minute":case"mins":case"min":case"m":return o*s;case"seconds":case"second":case"secs":case"sec":case"s":return o*t;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return o;default:return}}}}(e);if("number"===c&&isFinite(e))return o.long?(a=e,(u=Math.abs(a))>=n?i(a,u,n,"day"):u>=r?i(a,u,r,"hour"):u>=s?i(a,u,s,"minute"):u>=t?i(a,u,t,"second"):a+" ms"):function(e){var i=Math.abs(e);return i>=n?Math.round(e/n)+"d":i>=r?Math.round(e/r)+"h":i>=s?Math.round(e/s)+"m":i>=t?Math.round(e/t)+"s":e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},665:(e,t,s)=>{"use strict";function r(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}function n(e,t){var s=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),s.push.apply(s,r)}return s}function i(e){for(var t=1;t<arguments.length;t++){var s=null!=arguments[t]?arguments[t]:{};t%2?n(Object(s),!0).forEach((function(t){r(e,t,s[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(s)):n(Object(s)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(s,t))}))}return e}function o(e){return"Minified Redux error #"+e+"; visit https://redux.js.org/Errors?code="+e+" for the full message or use the non-minified dev environment for full errors. "}s.r(t),s.d(t,{__DO_NOT_USE__ActionTypes:()=>c,applyMiddleware:()=>_,bindActionCreators:()=>T,combineReducers:()=>p,compose:()=>E,createStore:()=>l,legacy_createStore:()=>h});var a="function"==typeof Symbol&&Symbol.observable||"@@observable",u=function(){return Math.random().toString(36).substring(7).split("").join(".")},c={INIT:"@@redux/INIT"+u(),REPLACE:"@@redux/REPLACE"+u(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+u()}};function d(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function l(e,t,s){var r;if("function"==typeof t&&"function"==typeof s||"function"==typeof s&&"function"==typeof arguments[3])throw new Error(o(0));if("function"==typeof t&&void 0===s&&(s=t,t=void 0),void 0!==s){if("function"!=typeof s)throw new Error(o(1));return s(l)(e,t)}if("function"!=typeof e)throw new Error(o(2));var n=e,i=t,u=[],h=u,p=!1;function f(){h===u&&(h=u.slice())}function T(){if(p)throw new Error(o(3));return i}function E(e){if("function"!=typeof e)throw new Error(o(4));if(p)throw new Error(o(5));var t=!0;return f(),h.push(e),function(){if(t){if(p)throw new Error(o(6));t=!1,f();var s=h.indexOf(e);h.splice(s,1),u=null}}}function _(e){if(!d(e))throw new Error(o(7));if(void 0===e.type)throw new Error(o(8));if(p)throw new Error(o(9));try{p=!0,i=n(i,e)}finally{p=!1}for(var t=u=h,s=0;s<t.length;s++)(0,t[s])();return e}function g(e){if("function"!=typeof e)throw new Error(o(10));n=e,_({type:c.REPLACE})}function y(){var e,t=E;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new Error(o(11));function s(){e.next&&e.next(T())}return s(),{unsubscribe:t(s)}}})[a]=function(){return this},e}return _({type:c.INIT}),(r={dispatch:_,subscribe:E,getState:T,replaceReducer:g})[a]=y,r}var h=l;function p(e){for(var t=Object.keys(e),s={},r=0;r<t.length;r++){var n=t[r];"function"==typeof e[n]&&(s[n]=e[n])}var i,a=Object.keys(s);try{!function(e){Object.keys(e).forEach((function(t){var s=e[t];if(void 0===s(void 0,{type:c.INIT}))throw new Error(o(12));if(void 0===s(void 0,{type:c.PROBE_UNKNOWN_ACTION()}))throw new Error(o(13))}))}(s)}catch(e){i=e}return function(e,t){if(void 0===e&&(e={}),i)throw i;for(var r=!1,n={},u=0;u<a.length;u++){var c=a[u],d=s[c],l=e[c],h=d(l,t);if(void 0===h)throw t&&t.type,new Error(o(14));n[c]=h,r=r||h!==l}return(r=r||a.length!==Object.keys(e).length)?n:e}}function f(e,t){return function(){return t(e.apply(this,arguments))}}function T(e,t){if("function"==typeof e)return f(e,t);if("object"!=typeof e||null===e)throw new Error(o(16));var s={};for(var r in e){var n=e[r];"function"==typeof n&&(s[r]=f(n,t))}return s}function E(){for(var e=arguments.length,t=new Array(e),s=0;s<e;s++)t[s]=arguments[s];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce((function(e,t){return function(){return e(t.apply(void 0,arguments))}}))}function _(){for(var e=arguments.length,t=new Array(e),s=0;s<e;s++)t[s]=arguments[s];return function(e){return function(){var s=e.apply(void 0,arguments),r=function(){throw new Error(o(15))},n={getState:s.getState,dispatch:function(){return r.apply(void 0,arguments)}},a=t.map((function(e){return e(n)}));return r=E.apply(void 0,a)(s.dispatch),i(i({},s),{},{dispatch:r})}}}},4704:(e,t,s)=>{t.formatArgs=function(t){if(t[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+t[0]+(this.useColors?"%c ":" ")+"+"+e.exports.humanize(this.diff),!this.useColors)return;const s="color: "+this.color;t.splice(1,0,s,"color: inherit");let r=0,n=0;t[0].replace(/%[a-zA-Z%]/g,(e=>{"%%"!==e&&(r++,"%c"===e&&(n=r))})),t.splice(n,0,s)},t.save=function(e){try{e?t.storage.setItem("debug",e):t.storage.removeItem("debug")}catch(e){}},t.load=function(){let e;try{e=t.storage.getItem("debug")}catch(e){}return!e&&"undefined"!=typeof process&&"env"in process&&(e=process.env.DEBUG),e},t.useColors=function(){return!("undefined"==typeof window||!window.process||"renderer"!==window.process.type&&!window.process.__nwjs)||("undefined"==typeof navigator||!navigator.userAgent||!navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))&&("undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))},t.storage=function(){try{return localStorage}catch(e){}}(),t.destroy=(()=>{let e=!1;return()=>{e||(e=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.log=console.debug||console.log||(()=>{}),e.exports=s(6426)(t);const{formatters:r}=e.exports;r.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}}},6426:(e,t,s)=>{e.exports=function(e){function t(e){let s,n,i,o=null;function a(...e){if(!a.enabled)return;const r=a,n=Number(new Date),i=n-(s||n);r.diff=i,r.prev=s,r.curr=n,s=n,e[0]=t.coerce(e[0]),"string"!=typeof e[0]&&e.unshift("%O");let o=0;e[0]=e[0].replace(/%([a-zA-Z%])/g,((s,n)=>{if("%%"===s)return"%";o++;const i=t.formatters[n];if("function"==typeof i){const t=e[o];s=i.call(r,t),e.splice(o,1),o--}return s})),t.formatArgs.call(r,e),(r.log||t.log).apply(r,e)}return a.namespace=e,a.useColors=t.useColors(),a.color=t.selectColor(e),a.extend=r,a.destroy=t.destroy,Object.defineProperty(a,"enabled",{enumerable:!0,configurable:!1,get:()=>null!==o?o:(n!==t.namespaces&&(n=t.namespaces,i=t.enabled(e)),i),set:e=>{o=e}}),"function"==typeof t.init&&t.init(a),a}function r(e,s){const r=t(this.namespace+(void 0===s?":":s)+e);return r.log=this.log,r}function n(e){return e.toString().substring(2,e.toString().length-2).replace(/\.\*\?$/,"*")}return t.debug=t,t.default=t,t.coerce=function(e){return e instanceof Error?e.stack||e.message:e},t.disable=function(){const e=[...t.names.map(n),...t.skips.map(n).map((e=>"-"+e))].join(",");return t.enable(""),e},t.enable=function(e){let s;t.save(e),t.namespaces=e,t.names=[],t.skips=[];const r=("string"==typeof e?e:"").split(/[\s,]+/),n=r.length;for(s=0;s<n;s++)r[s]&&("-"===(e=r[s].replace(/\*/g,".*?"))[0]?t.skips.push(new RegExp("^"+e.slice(1)+"$")):t.names.push(new RegExp("^"+e+"$")))},t.enabled=function(e){if("*"===e[e.length-1])return!0;let s,r;for(s=0,r=t.skips.length;s<r;s++)if(t.skips[s].test(e))return!1;for(s=0,r=t.names.length;s<r;s++)if(t.names[s].test(e))return!0;return!1},t.humanize=s(6680),t.destroy=function(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")},Object.keys(e).forEach((s=>{t[s]=e[s]})),t.names=[],t.skips=[],t.formatters={},t.selectColor=function(e){let s=0;for(let t=0;t<e.length;t++)s=(s<<5)-s+e.charCodeAt(t),s|=0;return t.colors[Math.abs(s)%t.colors.length]},t.enable(t.load()),t}},6005:(e,t,s)=>{t.formatArgs=function(t){if(t[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+t[0]+(this.useColors?"%c ":" ")+"+"+e.exports.humanize(this.diff),!this.useColors)return;const s="color: "+this.color;t.splice(1,0,s,"color: inherit");let r=0,n=0;t[0].replace(/%[a-zA-Z%]/g,(e=>{"%%"!==e&&(r++,"%c"===e&&(n=r))})),t.splice(n,0,s)},t.save=function(e){try{e?t.storage.setItem("debug",e):t.storage.removeItem("debug")}catch(e){}},t.load=function(){let e;try{e=t.storage.getItem("debug")}catch(e){}return!e&&"undefined"!=typeof process&&"env"in process&&(e=process.env.DEBUG),e},t.useColors=function(){return!("undefined"==typeof window||!window.process||"renderer"!==window.process.type&&!window.process.__nwjs)||("undefined"==typeof navigator||!navigator.userAgent||!navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))&&("undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))},t.storage=function(){try{return localStorage}catch(e){}}(),t.destroy=(()=>{let e=!1;return()=>{e||(e=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.log=console.debug||console.log||(()=>{}),e.exports=s(593)(t);const{formatters:r}=e.exports;r.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}}},593:(e,t,s)=>{e.exports=function(e){function t(e){let s,n,i,o=null;function a(...e){if(!a.enabled)return;const r=a,n=Number(new Date),i=n-(s||n);r.diff=i,r.prev=s,r.curr=n,s=n,e[0]=t.coerce(e[0]),"string"!=typeof e[0]&&e.unshift("%O");let o=0;e[0]=e[0].replace(/%([a-zA-Z%])/g,((s,n)=>{if("%%"===s)return"%";o++;const i=t.formatters[n];if("function"==typeof i){const t=e[o];s=i.call(r,t),e.splice(o,1),o--}return s})),t.formatArgs.call(r,e),(r.log||t.log).apply(r,e)}return a.namespace=e,a.useColors=t.useColors(),a.color=t.selectColor(e),a.extend=r,a.destroy=t.destroy,Object.defineProperty(a,"enabled",{enumerable:!0,configurable:!1,get:()=>null!==o?o:(n!==t.namespaces&&(n=t.namespaces,i=t.enabled(e)),i),set:e=>{o=e}}),"function"==typeof t.init&&t.init(a),a}function r(e,s){const r=t(this.namespace+(void 0===s?":":s)+e);return r.log=this.log,r}function n(e){return e.toString().substring(2,e.toString().length-2).replace(/\.\*\?$/,"*")}return t.debug=t,t.default=t,t.coerce=function(e){return e instanceof Error?e.stack||e.message:e},t.disable=function(){const e=[...t.names.map(n),...t.skips.map(n).map((e=>"-"+e))].join(",");return t.enable(""),e},t.enable=function(e){let s;t.save(e),t.namespaces=e,t.names=[],t.skips=[];const r=("string"==typeof e?e:"").split(/[\s,]+/),n=r.length;for(s=0;s<n;s++)r[s]&&("-"===(e=r[s].replace(/\*/g,".*?"))[0]?t.skips.push(new RegExp("^"+e.substr(1)+"$")):t.names.push(new RegExp("^"+e+"$")))},t.enabled=function(e){if("*"===e[e.length-1])return!0;let s,r;for(s=0,r=t.skips.length;s<r;s++)if(t.skips[s].test(e))return!1;for(s=0,r=t.names.length;s<r;s++)if(t.names[s].test(e))return!0;return!1},t.humanize=s(6680),t.destroy=function(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")},Object.keys(e).forEach((s=>{t[s]=e[s]})),t.names=[],t.skips=[],t.formatters={},t.selectColor=function(e){let s=0;for(let t=0;t<e.length;t++)s=(s<<5)-s+e.charCodeAt(t),s|=0;return t.colors[Math.abs(s)%t.colors.length]},t.enable(t.load()),t}},5787:(e,t,s)=>{t.formatArgs=function(t){if(t[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+t[0]+(this.useColors?"%c ":" ")+"+"+e.exports.humanize(this.diff),!this.useColors)return;const s="color: "+this.color;t.splice(1,0,s,"color: inherit");let r=0,n=0;t[0].replace(/%[a-zA-Z%]/g,(e=>{"%%"!==e&&(r++,"%c"===e&&(n=r))})),t.splice(n,0,s)},t.save=function(e){try{e?t.storage.setItem("debug",e):t.storage.removeItem("debug")}catch(e){}},t.load=function(){let e;try{e=t.storage.getItem("debug")}catch(e){}return!e&&"undefined"!=typeof process&&"env"in process&&(e=process.env.DEBUG),e},t.useColors=function(){return!("undefined"==typeof window||!window.process||"renderer"!==window.process.type&&!window.process.__nwjs)||("undefined"==typeof navigator||!navigator.userAgent||!navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))&&("undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))},t.storage=function(){try{return localStorage}catch(e){}}(),t.destroy=(()=>{let e=!1;return()=>{e||(e=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.log=console.debug||console.log||(()=>{}),e.exports=s(8573)(t);const{formatters:r}=e.exports;r.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}}},8573:(e,t,s)=>{e.exports=function(e){function t(e){let s,n,i,o=null;function a(...e){if(!a.enabled)return;const r=a,n=Number(new Date),i=n-(s||n);r.diff=i,r.prev=s,r.curr=n,s=n,e[0]=t.coerce(e[0]),"string"!=typeof e[0]&&e.unshift("%O");let o=0;e[0]=e[0].replace(/%([a-zA-Z%])/g,((s,n)=>{if("%%"===s)return"%";o++;const i=t.formatters[n];if("function"==typeof i){const t=e[o];s=i.call(r,t),e.splice(o,1),o--}return s})),t.formatArgs.call(r,e),(r.log||t.log).apply(r,e)}return a.namespace=e,a.useColors=t.useColors(),a.color=t.selectColor(e),a.extend=r,a.destroy=t.destroy,Object.defineProperty(a,"enabled",{enumerable:!0,configurable:!1,get:()=>null!==o?o:(n!==t.namespaces&&(n=t.namespaces,i=t.enabled(e)),i),set:e=>{o=e}}),"function"==typeof t.init&&t.init(a),a}function r(e,s){const r=t(this.namespace+(void 0===s?":":s)+e);return r.log=this.log,r}function n(e){return e.toString().substring(2,e.toString().length-2).replace(/\.\*\?$/,"*")}return t.debug=t,t.default=t,t.coerce=function(e){return e instanceof Error?e.stack||e.message:e},t.disable=function(){const e=[...t.names.map(n),...t.skips.map(n).map((e=>"-"+e))].join(",");return t.enable(""),e},t.enable=function(e){let s;t.save(e),t.namespaces=e,t.names=[],t.skips=[];const r=("string"==typeof e?e:"").split(/[\s,]+/),n=r.length;for(s=0;s<n;s++)r[s]&&("-"===(e=r[s].replace(/\*/g,".*?"))[0]?t.skips.push(new RegExp("^"+e.substr(1)+"$")):t.names.push(new RegExp("^"+e+"$")))},t.enabled=function(e){if("*"===e[e.length-1])return!0;let s,r;for(s=0,r=t.skips.length;s<r;s++)if(t.skips[s].test(e))return!1;for(s=0,r=t.names.length;s<r;s++)if(t.names[s].test(e))return!0;return!1},t.humanize=s(6680),t.destroy=function(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")},Object.keys(e).forEach((s=>{t[s]=e[s]})),t.names=[],t.skips=[],t.formatters={},t.selectColor=function(e){let s=0;for(let t=0;t<e.length;t++)s=(s<<5)-s+e.charCodeAt(t),s|=0;return t.colors[Math.abs(s)%t.colors.length]},t.enable(t.load()),t}},5741:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(1865)),i=r(s(7771)),o=r(s(300)),a=r(s(1665)),u=r(s(3642)),c=r(s(89)),d=r(s(249)),l=r(s(2230)),h=r(s(4644));class p{constructor(e){this.stores={},this.ios={},this.methods={},this.publicCallbacks={},this.use=this.use.bind(this),this.tune=this.tune.bind(this),this.tuned=this.tuned.bind(this),this.untune=this.untune.bind(this),this.exe=this.exe.bind(this),this.onResponseMeAPI=this.onResponseMeAPI.bind(this),this.offResponseChAPI=this.offResponseChAPI.bind(this),this.subscribe=this.subscribe.bind(this),this.exeCallback=this.exeCallback.bind(this),this.on=this.on.bind(this),this.off=this.off.bind(this),this.webWorker=e,this.webWorker.postMessage("WS_CONSTRUCTED",{ioType:i.default.API_SETUP})}static get server(){return o.default.env===a.default.DEVELOPMENT||o.default.env===a.default.LOCALHOST?a.default.DEVELOPMENT_DOMAIN:a.default.PRODUCTION_DOMAIN}static get option(){return{forceNew:!0}}use(e){return!(!this.stores[e]||!this.ios[this.id]||(this.id=e,0))}exe(e,t){return this[e]&&"function"==typeof this[e]?(this[e](t),!0):!(!this.methods[e]||"function"!=typeof this.methods[e]||(this.methods[e](t),0))}onResponseChAPI(e){const t=(e=>t=>{const s=e(t);this.stores[this.id]&&this.stores[this.id].dispatch(s)})(c.default);this.on(e,t)}offResponseChAPI(e){this.off(e)}getIoParams(e){let t="";return Object.keys(e).forEach((s=>{if("id"===s)return;if("defaultProps"===s)return;const r=e[s];t+=`${s}=${encodeURIComponent(r)}&`})),t.replace(/&$/,"")}tune(e){if(!this.use(e.id)){this.id=e.id,this.stores[this.id]=h.default(),this.stores[this.id].subscribe(this.subscribe);const t=new l.default(e);this.stores[this.id].dispatch({...t,type:"SETUPED_API_STORE"});const s=this.getIoParams(e),r=`${i.default.HTTPS_PROTOCOL}//${p.server}:${a.default.PORTS.SOCKET_IO}?${s}`;this.ios[this.id]=n.default(r,p.option),this.ios[this.id].on("connect",this.tuned),this.onResponseChAPI(e.ch),this.onRequestAPI(),this.onResponseMeAPI()}}untune(e){console.log("@@@@ API UNTUNE");const t=e&&e.id?e.id:this.id;return!!this.ios[t]&&(this.ios[t].disconnect(),delete this.ios[t],delete this.stores[t],Object.keys(this.ios).length>0&&(this.id=Object.keys(this.ios)[0]),!0)}tuned(){this.webWorker.postMessage("TUNED",{id:this.id,ioType:i.default.API_SETUP})}onRequestAPI(){const e=u.default,t=Object.keys(e),s=t.length,r=(e,t)=>(s,r=(()=>{}))=>{const n=this.stores[this.id].getState(),o=i.default.getRequestState(e,n,s),a=i.default.getRequestActionState(e,s),{requestState:u,actionState:c}=t(n,o,a);return this.publicCallbacks[u.type]=r,this.ios[this.id].emit(u.type,u),this.stores[this.id].dispatch(c)};for(let n=0;n<s;n++){const s=t[n],o=s.replace(i.default.API_TO_SERVER_REQUEST,""),a=e[s];this.methods[o]=r(s,a)}}onResponseMeAPI(){const e=(e=>t=>{const s=e(t);this.stores[this.id].dispatch(s)})(d.default);this.on(i.default.CATCH_ME_KEY,e)}on(e,t=(()=>{})){this.id&&!this.ios[this.id]._callbacks[`$${e}`]&&this.ios[this.id].on(e,t)}off(e){this.ios[this.id]&&this.ios[this.id]._callbacks[`$${e}`]&&this.ios[this.id].off(e)}subscribe(e){const t=this.stores[this.id].getState(),s=i.default.convertServerToApiIoType(this.id,t.app.actioned);this.exeCallback(t.app.actioned,t),this.webWorker.postMessage(t.app.actioned,{...t,ioType:s})}exeCallback(e,t){const{actionType:s,actionName:r}=i.default.getSequenceActionMap(e);if(r!==i.default.API_BROADCAST_CALLBACK&&s===i.default.API_RESPONSE_TYPE_EMIT&&this.publicCallbacks[r]){const{posts:e,thread:s,user:n}=t;this.publicCallbacks[r](t,{posts:e,thread:s,uid:n.uid})}if(s===i.default.API_RESPONSE_TYPE_BROADCAST&&this.publicCallbacks[i.default.API_BROADCAST_CALLBACK]){const{posts:e,thread:s,user:n}=t;this.publicCallbacks[i.default.API_BROADCAST_CALLBACK](r,{posts:e,thread:s,uid:n.uid})}}}t.default=p},3642:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(7771)),i=new(r(s(3365)).default);let o={};Object.keys(n.default.map).forEach((e=>{const t=`${n.default.API_TO_SERVER_REQUEST}${e}`;o[t]=(e,t,s)=>a[t.type]?a[t.type](e,t,s):{requestState:t,actionState:s}}));const a={post:(e,t,s)=>{const{app:r}=t;return r.isMediaCh&&(r.currentTime?t.app.inputCurrentTime=window.talknMedia.currentTime:t.app.inputCurrentTime=0),t.thread.emotions={},r.inputStampId?Object.keys(i.balances).forEach((s=>{if(i.balances[s]&&e.thread.emotions[s]){const e=i.balances[s](r.inputStampId);e&&e.forEach((e=>{const r=Object.keys(e)[0],n=i.idKeyTypes[r];t.thread.emotions[s]||(t.thread.emotions[s]={}),t.thread.emotions[s][n]||(t.thread.emotions[s][n]=0),t.thread.emotions[s][n]=e[r]}))}})):(s.app={...r},s.app.inputStampId=0,t.app.inputStampId=0),{requestState:t,actionState:s}}};t.default=o},89:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(7771));t.default=e=>{const t=`${n.default.SERVER_TO_API_BROADCAST}${e.type}`;return{...e,type:t}}},249:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(7771));t.default=e=>{const t=`${n.default.SERVER_TO_API_EMIT}${e.type}`;return{...e,type:t}}},5406:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(1665)),i=r(s(4817));function o(e,t){const{app:s}=e,{storageKey:r}=n.default;if(s.isRootCh){const{postsMulti:t,postsSingle:s}=e}return{state:e,props:t}}function a(e){const{app:t,thread:s,postsTimeline:r}=e,{storageKey:i}=n.default;if(t.isMediaCh){const t=r&&r.length?r.length:0;let s=[],n=[];for(let e=0;e<t;e++)0===r[e].currentTime?s.push(r[e]):n.push(r[e]);e.postsTimeline=s}return e}t.default={"SERVER_TO_API[BROADCAST]:post":o,"SERVER_TO_API[EMIT]:getMore":o,"SERVER_TO_API[EMIT]:fetchPosts":(e,t)=>({state:e,props:t}),"SERVER_TO_API[EMIT]:changeThread":(e,t)=>{const{app:s}=e,{rootCh:r}=s,{storageKey:o}=n.default;return s.dispThreadType===i.default.dispThreadTypeMulti?o.postSingle:o.postMulti,{state:e,props:t}},ON_CLICK_MENU:(e,t)=>{const{rootCh:s}=e.app;return{state:e,props:t}},RESIZE_END_WINDOW:(e,t)=>({state:e,props:t}),setStoragePosts:function(e,t){const{app:s}=e;return s.isMediaCh?{state:e=a(e),props:t}:o(e,t)},setStorageHtmlPosts:o,setStoragePostsTimeline:a}},8267:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(1216)),i=r(s(5406)),o=r(s(4817)),a=r(s(5232)),u=r(s(5537)),c=r(s(5300));t.default={updateAction:e=>t=>s=>{const r=e.getState();s&&(s.app=s.app?{...r.app,...s.app}:r.app,s.app.actioned=s.type),d[s.type]&&(s=d[s.type](r,s)),s&&t(s)}};const d={"SERVER_TO_API[EMIT]:tune":(e,t)=>{if(t.app[`offset${t.app.dispThreadType}FindId`]=t.app.offsetFindId,t.app.rootCh=t.thread.ch,t.app.tunedCh=t.thread.ch,t.app.detailCh=t.thread.ch,t.app.isTune=!0,t.app.isRootCh=t.app.rootCh===t.thread.ch,t.app.isMediaCh=o.default.getIsMediaCh(t.thread.ch),t.app.dispThreadType=t.app.isMediaCh?o.default.dispThreadTypeTimeline:o.default.dispThreadTypeMulti,t.app.isToggleMultistream=!1,t.thread.title=t.thread.serverMetas.title,t.thread.hasSlash=n.default.getBool(t.thread.hasSlash),t.threads=c.default.getMergedThreads(e.threads,t.thread),t.threadDetail={...t.thread},t.app.isRootCh&&(t.app.rootTitle=t.thread.title),t.app.isMediaCh){const e=o.default.getMediaSrc(t.thread.protocol,t.thread.ch);t.app.chType=o.default.getMediaTypeFromSrc(e)}else t.app.chType=o.default.mediaTagTypeNo;return t},"SERVER_TO_API[EMIT]:fetchPosts":(e,t)=>(t.app.dispThreadType=t.app.isMediaCh?o.default.dispThreadTypeTimeline:o.default.dispThreadTypeMulti,t.app.offsetFindId=o.default.getOffsetFindId({posts:t.posts}),t.app[`offset${t.app.dispThreadType}FindId`]=t.app.offsetFindId,(t={...a.default.getAnyActionPosts(t,e)}).app.isMediaCh&&(t=i.default.setStoragePostsTimeline(t)),t),"API_TO_SERVER[REQUEST]:changeThread":(e,t)=>(t.app=t.app?{...e.app,...t.app}:e.app,t.app.isMediaCh=o.default.getIsMediaCh(t.thread.ch),t.app.offsetFindId=o.default.defaultOffsetFindId,t.app.offsetTimelineFindId=o.default.defaultOffsetFindId,t.app.offsetMultiFindId=o.default.defaultOffsetFindId,t.app.offsetSingleFindId=o.default.defaultOffsetFindId,t.app.offsetChildFindId=o.default.defaultOffsetFindId,t.app.offsetLogsFindId=o.default.defaultOffsetFindId,t.thread=t.thread?{...e.thread,...t.thread}:e.thread,t.posts=new a.default,t.postsMulti=new a.default,t.postsChild=new a.default,t.postsTimeline=new a.default,t.postsSingle=new a.default,t),"SERVER_TO_API[EMIT]:changeThread":(e,t)=>(t.app.isRootCh=t.app.rootCh===t.thread.ch,t.app.tunedCh=t.thread.ch,t.thread.title=t.thread.serverMetas.title,t.threads=c.default.getMergedThreads(e.threads,t.thread),t.threadDetail={...t.thread},t),"SERVER_TO_API[EMIT]:updateThread":(e,t)=>(t.threads=c.default.getMergedThreads(e.threads,t.thread),t.threadDetail={...t.thread},t),"SERVER_TO_API[EMIT]:updateThreadServerMetas":(e,t)=>(t.threads=c.default.getMergedThreads(e.threads,t.thread),t.threadDetail={...t.thread},t),"SERVER_TO_API[REQUEST]:post":(e,t)=>(t.app.inputStampId=0,t),"SERVER_TO_API[BROADCAST]:post":(e,t)=>{if(e.thread.ch===t.thread.ch&&t.thread.emotions&&Object.keys(t.thread.emotions).length>0){const s={...t.thread.emotions};t.thread.emotions={...e.thread.emotions},Object.keys(s).forEach((e=>{Object.keys(s[e]).forEach((r=>{t.thread.emotions[e][r]=t.thread.emotions[e][r]+s[e][r]}))})),t.threadDetail={...t.thread}}return t.thread.ch=e.thread.ch,t=a.default.getAnyActionPosts(t,e)},"SERVER_TO_API[EMIT]:getMore":(e,t)=>(t.app.offsetFindId=o.default.getOffsetFindId({posts:t.posts}),t.app[`offset${t.app.dispThreadType}FindId`]=t.app.offsetFindId,a.default.getAnyActionPosts(t,e)),"API_TO_SERVER[REQUEST]:changeThreadDetail":(e,t)=>(delete t.thread,t),"SERVER_TO_API[EMIT]:changeThreadDetail":(e,t)=>(t.app.detailCh=t.thread.ch,t.threads=c.default.getMergedThreads(e.threads,t.thread),t.threadDetail={...t.thread},t.threadDetail.title=t.thread.serverMetas.title,t.threadDetail.emotions={...e.threads[t.app.detailCh].emotions},t.threadDetail.hasSlash=null===t.threadDetail.hasSlash||n.default.getBool(t.threadDetail.hasSlash),delete t.thread,t.thread=t,t),CLOSE_LINKS:(e,t)=>(t.app=t.app?{...e.app,...t.app}:e.app,t.thread=t.thread?{...e.thread,...t.thread}:e.thread,t),ON_CLICK_TO_MULTI_THREAD:(e,t)=>(t.app.isLinkCh=!1,t.app.isRootCh=t.thread.ch===e.app.rootCh,e.threads[t.thread.ch]?t.thread=e.threads[t.thread.ch]:t.thread={...e.thread,...t.thread},t),ON_CLICK_TO_TIMELINE_THREAD:(e,t)=>{const s=t.thread.ch;t.thread={...e.thread,...t.thread},t.thread.ch=s;const r=o.default.getMediaSrc(t.thread.protocol,t.thread.ch);return t.thread.findType=u.default.getFindTypeFromSrc(r),t.postsTimeline=[],t.app.isMediaCh=!0,t.app.offsetFindId=o.default.defaultOffsetFindId,t.app.offsetChildFindId=o.default.defaultOffsetFindId,t},ON_CLICK_TO_SINGLE_THREAD:(e,t)=>(t.thread={...e.thread,...t.thread},t.app=e.app,t.app.isLinkCh=!1,t),ON_CLICK_TO_CHILD_THREAD:(e,t)=>(t.thread={...e.thread,...t.thread},t.postsChild=[],t.app.offsetFindId=o.default.defaultOffsetFindId,t.app.offsetChildFindId=o.default.defaultOffsetFindId,t),ON_CLICK_MENU:(e,t)=>(t.app.desc=t.ui.menuComponent,t),RESIZE_END_WINDOW:(e,t)=>(t.thread=e.thread,t),ON_CLICK_TOGGLE_DISP_DETAIL:(e,t)=>(t.threadDetail.hasSlash=null===t.threadDetail.hasSlash||n.default.getBool(t.threadDetail.hasSlash),t),TOGGLE_BUBBLE_POST:(e,t)=>(t.thread=e.thread,t),START_LINK_MEDIA:(e,t)=>(t.app.isLinkCh=!0,t),GET_CLIENT_METAS:(e,t)=>{let s=!1,{clientMetas:r}=t,{serverMetas:n}=e.thread;if(t.thread={},Object.keys(r).forEach(((e,i)=>{r[e]&&""!==r[e]&&n[e]!==r[e]&&(t.thread.serverMetas||(t.thread.serverMetas={}),s=!0,t.thread.serverMetas[e]=r[e])})),s)return t.threadDetail={...e.threadDetail},t.threadDetail.serverMetas={...t.threadDetail.serverMetas,...t.thread.serverMetas},t}}},1583:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(2802));t.default=(e=new n.default,t)=>t.analyze?e.merge(t.analyze):e},7367:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=(e=[],t)=>[t.type,...e]},5221:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(4817));t.default=(e=new n.default,t)=>t.app?new n.default(t.app):e},6690:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(5813));t.default=(e=new n.default,t)=>t.bootOption?e.merge(t.bootOption):e},9530:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.reducerFiles=void 0;const n=s(665),i=r(s(1583)),o=r(s(7367)),a=r(s(5221)),u=r(s(6690)),c=r(s(9202)),d=r(s(7738)),l=r(s(6686)),h=r(s(705)),p=r(s(6706)),f=r(s(4005)),T=r(s(358)),E=r(s(7706)),_=r(s(2543)),g=r(s(5181)),y=r(s(4980)),m=r(s(6086)),C=r(s(6297)),S=r(s(6087)),P=r(s(507));t.reducerFiles={app:a.default,user:P.default,tuneCh:S.default,ranks:_.default,thread:y.default,threads:C.default,threadDetail:m.default,analyze:i.default,bootOption:u.default,setting:g.default,posts:c.default,postsTimeline:p.default,postsTimelineStock:f.default,postsTimelineZero:T.default,postsTimelineZeroAfter:E.default,postsMulti:l.default,postsSingle:h.default,postsChild:d.default,apiLog:o.default},t.default=n.combineReducers(t.reducerFiles)},9202:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(5232));t.default=(e=[],t)=>t.posts?new n.default(t.posts):e},7738:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(5232));t.default=(e=[],t)=>{switch(t.type){case"API_TO_SERVER[REQUEST]:changeThread":return new n.default;case"SERVER_TO_API[EMIT]:fetchPosts":case"SERVER_TO_API[BROADCAST]:post":if(t.postsChild&&t.postsChild.length>0&&t.thread.ch===t.postsChild[0].ch)return[...e,...t.postsChild];break;case"SERVER_TO_API[EMIT]:getMore":if(t.postsChild&&t.postsChild.length>0)return[...t.postsChild,...e]}return e}},6686:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(300)),i=r(s(5232));t.default=(e=[],t)=>{switch(t.type){case"ON_CLICK_MULTISTREAM":return t.postsMulti;case"CLIENT_TO_SERVER[EMIT]:changeThread":return new i.default;case"SERVER_TO_API[EMIT]:fetchPosts":if(t.postsMulti&&t.postsMulti.length>0&&t.app.isRootCh)return[...t.postsMulti];break;case"SERVER_TO_API[BROADCAST]:post":if(t.postsMulti&&t.postsMulti.length>0&&t.app.rootCh===t.postsMulti[0].ch)return[...e,...t.postsMulti];break;case"SERVER_TO_API[EMIT]:getMore":if(t.postsMulti&&t.postsMulti.length>0){let s=[];return e.length+t.postsMulti.length>n.default.findOneLimitCnt?(s=[...t.postsMulti,...e],s.slice(0,n.default.findOneLimitCnt)):[...t.postsMulti,...e]}}return e}},705:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(5853));t.default=(e=[],t)=>{switch(t.type){case"ON_CLICK_MULTISTREAM":return t.postsSingle;case"API_TO_SERVER[REQUEST]:changeThread":return new n.default;case"SERVER_TO_API[EMIT]:fetchPosts":case"SERVER_TO_API[BROADCAST]:post":if(t.postsSingle&&t.postsSingle.length>0)return[...e,...t.postsSingle];break;case"SERVER_TO_API[EMIT]:getMore":if(t.postsSingle&&t.postsSingle.length>0)return[...t.postsSingle,...e]}return e}},6706:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(6423));t.default=(e=[],t)=>{switch(t.type){case"API_TO_SERVER[REQUEST]:changeThread":return new n.default;case"UNMOUNT_POSTS_TIMELINE":return e.map((e=>(e.dispFlg=e.currentTime<=t.mediaCurrentTime,e)));case"CLEAR_POSTS_TIMELINE":return[...t.postsTimeline];case"SERVER_TO_API[EMIT]:fetchPosts":case"NEXT_POSTS_TIMELINE":if(t.postsTimeline&&t.postsTimeline.length>0)return[...e,...t.postsTimeline];break;case"PREV_POSTS_TIMELINE":if(t.postsTimeline&&t.postsTimeline.length>0)return[...t.postsTimeline];break;case"SERVER_TO_API[BROADCAST]:post":if(t.postsTimeline&&t.postsTimeline.length>0&&t.postsTimeline[0].uid===t.user.uid&&t.postsTimeline[0].ch===t.thread.ch)return[...e,...t.postsTimeline];break;case"SERVER_TO_API[EMIT]:getMore":if(t.postsTimeline&&t.postsTimeline.length>0)return[...t.postsTimeline,...e]}return e}},4005:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(3443));t.default=(e=[],t)=>{switch(t.type){case"SERVER_TO_API[BROADCAST]:post":case"CLEAR_POSTS_TIMELINE":return t.postsTimelineStock?[...e,t.postsTimelineStock]:e;default:return t.postsTimelineStock?new n.default(t.postsTimelineStock):e}}},358:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(8059));t.default=(e=[],t)=>{switch(t.type){case"SERVER_TO_API[BROADCAST]:post":case"CLEAR_POSTS_TIMELINE":return t.postsTimelineZero?[...e,t.postsTimelineZero]:e;default:return t.postsTimelineZero?new n.default(t.postsTimelineZero):e}}},7706:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(6301));t.default=(e=[],t)=>{switch(t.type){case"SERVER_TO_API[BROADCAST]:post":case"CLEAR_POSTS_TIMELINE":return t.postsTimelineZeroAfter?[...e,t.postsTimelineZeroAfter]:e;default:return t.postsTimelineZeroAfter?new n.default(t.postsTimelineZeroAfter):e}}},2543:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(5232));t.default=(e=[],t)=>{let s=[],r=0;const i=(e,s)=>e.ch===t.app.rootCh||s.ch===t.app.rootCh?0:e.liveCnt<s.liveCnt?1:e.liveCnt>s.liveCnt?-1:0;switch(t.type){case"SERVER_TO_API[EMIT]:fetchPosts":return t.app.isLinkCh?e:(s=n.default.getDispPosts(t),r=s&&s.length?s.length:0,0===r?e:e.map((e=>t.thread.ch===e.ch?{...e,favicon:s[r-1].favicon,stampId:s[r-1].stampId,post:s[r-1].post}:e)));case"SERVER_TO_API[BROADCAST]:tune":case"SERVER_TO_API[BROADCAST]:changeThread":case"SERVER_TO_API[BROADCAST]:disconnect":return e.map((e=>t.thread.ch===e.ch?{...e,liveCnt:t.thread.liveCnt}:e)).sort(i);case"SERVER_TO_API[BROADCAST]:post":return e.map((e=>t.posts[0].ch===e.ch?{...e,title:t.posts[0].title,stampId:t.posts[0].stampId,favicon:t.posts[0].favicon,post:t.posts[0].post}:e));case"SERVER_TO_API[EMIT]:rank":if(e&&e.length>0&&t.rank&&t.rank.length>0){const s=[],r=t.rank.length;let n=t.rank[0];for(let i=0;i<r;i++){let r=t.rank[i];n=r.updateTime>n.updateTime?r:n,r.ch===e[0].ch&&(r={...r,liveCnt:e[0].liveCnt}),s.push(r)}return s.sort(i),s[0].faicon=n.favicon,s[0].post=n.post,s[0].stampId=n.stampId,s}return t.rank?t.rank:e;default:return t.rank?t.rank:e}}},5181:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(3871));t.default=(e=new n.default,t)=>t.setting?e.merge(t.setting):e},4980:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(5537));t.default=(e=new n.default({},{}),t)=>{switch(t.type){case"SETUPED_API_STORE":case"SERVER_TO_API[EMIT]:tune":case"SERVER_TO_API[EMIT]:changeThread":case"SERVER_TO_API[EMIT]:fetchPosts":case"SERVER_TO_API[EMIT]:updateThreadServerMetas":return new n.default(t.thread);case"SERVER_TO_API[BROADCAST]:tune":case"SERVER_TO_API[BROADCAST]:changeThread":case"SERVER_TO_API[BROADCAST]:disconnect":if(e.ch===t.thread.ch)return t.thread?e.merge(t.thread):e;case"SERVER_TO_API[BROADCAST]:post":if(e.ch===t.thread.ch)return t.thread?e.merge(t.thread):e}return e}},6086:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(5537));t.default=(e=new n.default({},{}),t)=>t.threadDetail?e.merge(t.threadDetail):e},6297:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(5300));t.default=(e=new n.default,t)=>t.threads?e.merge(t.threads):e},6087:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(1960));t.default=(e=new n.default,t)=>{switch(t.type){case"SERVER_TO_API[EMIT]:tune":return""===t.thread.lastPost.ch?new n.default({ch:t.thread.ch,chs:t.thread.chs,title:t.thread.title,favicon:t.thread.favicon}):new n.default(t.thread.lastPost);case"SERVER_TO_API[BROADCAST]:tune":case"SERVER_TO_API[BROADCAST]:changeThread":case"SERVER_TO_API[BROADCAST]:disconnect":const{thread:s}=t;if(s.ch===e.ch){const t={...e,liveCnt:s.liveCnt};return new n.default(t)}break;case"SERVER_TO_API[BROADCAST]:post":const r=t.posts[0];if(r.ch===e.ch)return new n.default({...e,title:r.title,stampId:r.stampId,favicon:r.favicon,post:r.post})}return e}},507:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(6548));t.default=(e=new n.default,t)=>t.user?e.merge(t.user):e},3560:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(){return[]}}},2802:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(1216));class i extends n.default{constructor(e={}){return super(),this.create({liveCnt:0})}}t.default=i},4817:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(1216)),i=r(s(1960)),o=r(s(5537));class a extends n.default{constructor(e={},t=""){super(),this.offsetTimelineFindId=i.default.defaultFindId,this.offsetSingleFindId=i.default.defaultFindId,this.offsetMultiFindId=i.default.defaultFindId,this.offsetChildFindId=i.default.defaultFindId,this.offsetLogsFindId=i.default.defaultFindId;const s=e.ch?e.ch:"",r=e.id?e.id:"",u=!!n.default.isSet(e.isTune)&&e.isTune,c=n.default.isSet(e.isMediaCh)?e.isMediaCh:a.getIsMediaCh(s),d=!!n.default.isSet(e.isLinkCh)&&e.isLinkCh,l=e.rootCh?e.rootCh:s,h=n.default.isSet(e.isRootCh)?e.isRootCh:l===s,p=e.rootTitle?e.rootTitle:"talkn",f=a.getMediaSrc(e.protocol,s),T=a.getMediaType(f,e),E=e&&e.tunedCh?e.tunedCh:"",_=a.getDispThreadType(e,c),g=!n.default.isSet(e.multistream)||e.multistream,y=e&&e.findType?e.findType:o.default.findTypeAll,m=e&&e.offsetFindId?e.offsetFindId:a.defaultOffsetFindId,C=e&&e.offsetTimelineFindId?e.offsetTimelineFindId:a.defaultOffsetFindId,S=e&&e.offsetSingleFindId?e.offsetSingleFindId:a.defaultOffsetFindId,P=e&&e.offsetMultiFindId?e.offsetMultiFindId:a.defaultOffsetFindId,O=e&&e.offsetChildFindId?e.offsetChildFindId:a.defaultOffsetFindId,I=e&&e.offsetLogsFindId?e.offsetLogsFindId:a.defaultOffsetFindId,A=e.inputPost?e.inputPost:"",b=!!e.inputStampId&&e.inputStampId,R=e.inputCurrentTime?e.inputCurrentTime:0,v=e.inputSearch?e.inputSearch:"",M=!!n.default.isSet(e.isToggleMultistream)&&e.isToggleMultistream,w=!!n.default.isSet(e.isRankDetailMode)&&e.isRankDetailMode,D=e&&e.actioned?e.actioned:"",L=n.default.isSet(e.debug)?e.debug:"";return this.create({id:r,isTune:u,isRootCh:h,isLinkCh:d,isMediaCh:c,rootCh:l,rootTitle:p,chType:T,dispThreadType:_,tunedCh:E,multistream:g,findType:y,offsetFindId:m,offsetTimelineFindId:C,offsetSingleFindId:S,offsetMultiFindId:P,offsetChildFindId:O,offsetLogsFindId:I,inputPost:A,inputStampId:b,inputCurrentTime:R,inputSearch:v,isToggleMultistream:M,isRankDetailMode:w,actioned:D,debug:L})}static get defaultOffsetFindId(){return i.default.defaultFindId}static get dispThreadTypeTimeline(){return"Timeline"}static get dispThreadTypeSingle(){return"Single"}static get dispThreadTypeMulti(){return"Multi"}static get dispThreadTypeChild(){return"Child"}static get dispThreadTypeLogs(){return"Logs"}static get mediaTagTypeNo(){return"html"}static get mediaTagTypeAudio(){return"audio"}static get mediaTagTypeVideo(){return"video"}static get mediaTypeMp3(){return"mp3"}static get mediaTypeMp4(){return"mp4"}static get mediaTypeM4a(){return"m4a"}static get mediaChs(){return[a.mediaTypeMp3,a.mediaTypeMp4,a.mediaTypeM4a]}static get mediaChTagTypes(){return{[a.mediaTypeMp3]:a.mediaTagTypeAudio,[a.mediaTypeMp4]:a.mediaTagTypeVideo,[a.mediaTypeM4a]:a.mediaTagTypeAudio}}static getMediaType(e,t){return t&&t.chType?t.chType:a.getMediaTypeFromSrc(e)}static getMediaTypeFromSrc(e){const t=Object.keys(a.mediaChTagTypes),s=t.length;let r="html";for(let n=0;n<s;n++){const s=new RegExp(`.${t[n]}$`);if(e.match(s)){r=a.mediaChTagTypes[t[n]];break}}return r}static validInputPost(e){return!!/\r\n$|\n$|\r$/gim.test(e)&&"LAST TYPE BREAK LINE."}static validPost(e){return""===e?"NO INPUT POST":/^\r\n+$|\n+$|\r+$/g.test(e)?"ONLY NEW LINE":/^\s+$/g.test(e)?"only space":!!/^\r\n+(\s|\S)+$|^\n+(\s|\S)+$|^\r+(\s|\S)+$/.test(e)&&"EMPTY POST"}static getWidth(e){return"object"==typeof window&&window.innerWidth?window.innerWidth:e.width?"string"==typeof e.width&&e.width.indexOf("px")>=0?Number(e.width.replace("px","")):e.width:0}static getHeight(e={}){return"object"==typeof window&&window.innerHeight?window.innerHeight:0}static isMediaContentType(e){return a.isAudioContentType(e)||a.isVideoContentType(e)}static isAudioContentType(e){return e.indexOf(a.mediaTagTypeAudio)>=0}static isVideoContentType(e){return e.indexOf(a.mediaTagTypeVideo)>=0}static getMediaSrc(e,t){return e+"/"+t.replace(/\/$/,"")}static getIsMediaCh(e){return a.mediaChs.some((t=>{const s=new RegExp(`.${t}/$|.${t}$`);return e.match(s)}))}static getDispThreadType(e,t){return e&&e.dispThreadType?e.dispThreadType:t?a.dispThreadTypeTimeline:a.dispThreadTypeMulti}static getOffsetFindId({posts:e}){return e&&e[0]&&e[0]._id?e[0]._id:i.default.defaultFindId}static getStepToDispThreadType({app:e,ranks:t},s,r,n=""){let i="";const o=e&&e.dispThreadType?e.dispThreadType:a.dispThreadTypeMulti;return i=(e=a.getStepDispThreadType({app:e,ranks:t},s,r,n)).dispThreadType,{app:e,stepTo:`${o} to ${i}`}}static getStepDispThreadType({app:e,ranks:t},s={},r,n){const i=e||{};if(i.offsetFindId=a.defaultOffsetFindId,s.isMediaCh)return i.dispThreadType=a.dispThreadTypeTimeline,i.offsetFindId=i.offsetTimelineFindId?i.offsetTimelineFindId:a.defaultOffsetFindId,i.isLinkCh="Links"===n||"findMediaCh"===n||"ToMedia"===n,i.isMediaCh=!0,i;if("BackToRootCh"===n&&(i.isLinkCh=!1),"Links"===n&&t.length>0){if(!t.some((e=>e.ch===r||e.ch===r+"/")))return i.offsetFindId=a.defaultOffsetFindId,i.dispThreadType=a.dispThreadTypeChild,i.isLinkCh=!0,i}return i.rootCh===r?i.multistream?i.dispThreadType=a.dispThreadTypeMulti:i.dispThreadType=a.dispThreadTypeSingle:i.dispThreadType=a.dispThreadTypeChild,i}}t.default=a},5813:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(1216));class i extends n.default{constructor(e={}){return super(),this.create({...e})}static rebuildAttributes(e){let t={};return Object.keys(e).forEach((s=>{t[e[s].name]=e[s].value})),t}}t.default=i},367:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(1216));class i extends n.default{constructor(e=[]){return super(),e=e||[],this.create(e)}}t.default=i},1960:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(1216)),i=r(s(300));class o extends n.default{constructor(e){super(),this._id=o.defaultValues._id,this.ch=o.defaultValues.ch,this.chs=o.defaultValues.chs,this.favicon=o.defaultValues.favicon,this.findType=o.defaultValues.findType,this.layer=o.defaultValues.layer,this.post=o.defaultValues.post,this.protocol=o.defaultValues.protocol,this.stampId=o.defaultValues.stampId,this.title=o.defaultValues.title,this.liveCnt=o.defaultValues.liveCnt,this.uid=o.defaultValues.uid,this.utype=o.defaultValues.utype,this.dispFlg=o.defaultValues.dispFlg,this.data=o.defaultValues.data,this.createTime=o.defaultValues.createTime,this.currentTime=o.defaultValues.currentTime,this.updateTime=o.defaultValues.updateTime;const t=e?{...o.defaultValues,...e}:o.defaultValues;return this.create(t)}static get defaultFindId(){return"000000000000000000000000"}static get defaultValues(){return{_id:"",ch:"/",chs:["/"],favicon:i.default.defaultFavicon,findType:"Html",layer:1,post:"",protocol:"https:",stampId:0,title:"talkn",liveCnt:0,uid:"",utype:"",dispFlg:!0,data:null,createTime:new Date,currentTime:new Date,updateTime:new Date}}}t.default=o},9565:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(e=[]){return e}}},5232:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(4817)),i=r(s(9565)),o=r(s(5853)),a=r(s(6423)),u=r(s(3443));class c{constructor(e=[]){return e}static getDispPosts(e){const{app:t,postsTimeline:s,postsMulti:r,postsSingle:i,postsChild:o,postsLogs:a}=e;switch(t.dispThreadType){case n.default.dispThreadTypeTimeline:return s;case n.default.dispThreadTypeMulti:return r;case n.default.dispThreadTypeSingle:return i;case n.default.dispThreadTypeChild:return o;case n.default.dispThreadTypeLogs:return a}}static getAnyActionPosts(e,t){const{app:s,posts:r}=e,a=r&&r.length>0;switch(e.postsMulti=new i.default,e.postsSingle=new o.default,e.postsChild=[],e.postsLogs=[],s.dispThreadType){case n.default.dispThreadTypeTimeline:e=c.getAnyActionPostsTimeline(e,r,t,a);break;case n.default.dispThreadTypeMulti:e.postsMulti=a?r:[];break;case n.default.dispThreadTypeSingle:e.postsSingle=a?r:[];break;case n.default.dispThreadTypeChild:e.postsChild=a?r:[];break;case n.default.dispThreadTypeLogs:e.postsLogs=a?r:[]}return e}static getAnyActionPostsTimeline(e,t,s,r){if("SERVER_TO_API[BROADCAST]:post"===e.type)e.postsTimeline=new a.default,e.postsTimeline.push(e.posts[0]);else if("SERVER_TO_API[EMIT]:fetchPosts"===e.type&&(e.postsTimeline=new a.default,e.postsTimelineStock=new u.default,r)){const s=t.length;for(let r=0;r<s;r++)0===t[r].currentTime?e.postsTimeline.push(t[r]):e.postsTimelineStock.push(t[r])}return e}}t.default=c},5853:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(e=[]){return e}}},6423:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(e=[]){return e}}},3443:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(e=[]){return e}}},8059:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(e=[]){return e}}},6301:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(e=[]){return e}}},3364:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(e=[]){return e}}},3871:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(1216));class i extends n.default{constructor(e={}){super();const t=e&&e.client?e.client:{},s=e&&e.common?e.common:{},r=e&&e.server?e.server:{};return this.create({client:t,common:s,server:r})}}t.default=i},5537:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(1216)),i=r(s(7771)),o=r(s(300)),a=r(s(4817));class u extends n.default{constructor(e={},t){super(),this.chs=["/"],this.protocol=i.default.TALKN_PROTOCOL,this.charset="UTF-8",this.host="",this.favicon=u.getDefaultFavicon(),this.findType=u.findTypeAll,this.title=u.getDefaultTitle(),this.metas=[],this.emotions={},this.serverMetas={},this.clientMetas={},this.links=[],this.h1s=[],this.audios=[],this.videos=[],this.layer=u.getLayer(),this.mediaIndex=[],this.postCnt=0,this.multiPostCnt=0,this.isSelfCh=!1,this.createTime="",this.updateTime="";const s=u.isWindowObj(e)?u.constructorFromWindow(e,t):e;return this.create(s)}static get findTypeAll(){return"All"}static get findTypeHtml(){return"Html"}static get findTypeMusic(){return"Music"}static get findTypePdf(){return"Pdf"}static get findTypeVideo(){return"Video"}static get findTypeOther(){return"Other"}static get findTypes(){return{[u.findTypeHtml]:["text/html"],[u.findTypeMusic]:["audio","audio/mpeg","audio/mp4","audio/x-wav","audio/midi","application/x-smaf"],[u.findTypeVideo]:["video","video/mpeg","video/mp4","video/quicktime","video/x-ms-wmv","application/x-shockwave-flash","video/3gpp2"]}}static getDefaultTitle(){return"talkn"}static getDefaultFavicon(){return`https://${o.default.assetsURL}/favicon.ico`}static isWindowObj(e){return!!e.alert}static constructorFromWindow(e,t){const s=!!t.ch&&t.ch,r=u.getCh(t);let i={};return i.ch=r,i.chs=["/"],i.hasSlash=!!t.hasslash&&n.default.getBool(t.hasslash),i.protocol="talkn:",i.contentType="",i.charset="UTF-8",i.host="",i.favicon=u.getDefaultFavicon(),i.findType=u.findTypeAll,s?(i.protocol=u.getProtocol(s),i.host=u.getHost(s),i.chs=s.chs&&s.chs.length>0?s.chs:u.getChs(r)):(i.protocol=location.protocol?location.protocol:"????:",i.chs=e.chs&&e.chs.length>0?e.chs:u.getChs(r),i.contentType=document.contentType?document.contentType:"",i.charset=document.charset?document.charset:"",i.host=location.host?location.host:"",i.favicon=u.getFaviconFromWindow(window)),i.title=u.getDefaultTitle(),i.metas=[],i.serverMetas={},i.clientMetas={},i.emotions={},i.links=[],i.h1s=[],i.audios=[],i.videos=[],i.layer=u.getLayer(i.ch),i.mediaIndex=[],i.postCnt=0,i.multiPostCnt=0,i.isSelfCh=u.getIsSelfCh("",i.ch),i.createTime="",i.updateTime="",i}static getCh(e){return e&&e.ch&&""!==e.ch?e.ch:"/"}static getChTop(e){return""!==e?"/"+e.split("/")[1]:""}static getChs(e){let t=["/"];if(""!==e){const r="/"===e.slice(-1)?e:e+"/";if("/"!==r){const e=r.split("/"),n=e.length;let i="";for(var s=1;s<n;s++)""!==e[s]&&(i+=e[s],i="/"===i.slice(-1)?i:i+"/",i="/"===i.slice(0,1)?i:"/"+i,t.push(i))}}return t}static getHost(e){return e.indexOf(".")>=0?(e=e.replace("https://","").replace("http://","")).replace(/^\//,"").replace(/\/.*$/,""):o.default.domain}static getProtocol(e){return e.indexOf("http:")>=0?"http:":e.indexOf("https:")>=0?"https:":location&&location.protocol?location.protocol:"????:"}static getIsSelfCh(e,t){return e.replace("http:/","").replace("https:/","").replace(/\u002f$/,"")===t}static getLayer(e="/"){return e.split("/").length-1}static getMediaSrc(e){return a.default.getMediaSrc(e.protocol,e.ch)}static getMediaTagType(e){const t=u.getMediaSrc(e);return a.default.getMediaType(t,null)}static getFaviconFromWindow(e){if(e&&e.document){const t=e.document.evaluate("//link[contains(@rel,'icon')or(contains(@rel,'ICON'))][1]/@href",e.document,null,2,null).stringValue,s="http://",r="https://",n=location.host;if(t.indexOf(s)||t.indexOf(r)){const e=s+n+(t||"/favicon.ico");return 1==e.split("//").length-1?e:t}return t}return""}static getStatus(e,t,s){let r={dispType:"",isCreate:!1,isRequireUpsert:!1,isMultistream:!1,isMediaCh:!1,isToggleMultistream:!1,getMore:!1};return r.isCreate=u.getStatusCreate(s),r.isRequireUpsert=u.getStatusIsRequireUpsert(e,r.isCreate),r.isMultistream=u.getStatusIsMultistream(t),r.isToggleMultistream=u.getStatusIsToggleMultistream(t),r.isMediaCh=u.getStatusIsMediaCh(e.ch),r}static getStatusCreate(e){return!e}static getStatusIsRequireUpsert(e,t=!1){if(!t)return!0;if(e.updateTime){const t=e.updateTime.getTime?e.updateTime.getTime():e.updateTime,s=new Date,r=s.getFullYear(),n=s.getMonth(),i=s.getDate(),a=s.getHours();return s.getMinutes(),t<new Date(r,n,i,a-o.default.findOneThreadActiveHour).getTime()}return!1}static getStatusIsMultistream(e){return void 0===e||void 0===e.dispThreadType||e.dispThreadType===a.default.dispThreadTypeMulti&&e.multistream}static getStatusIsMediaCh(e){return a.default.getIsMediaCh(e)}static getStatusIsToggleMultistream(e){return void 0!==e&&void 0!==e.actioned&&e.isToggleMultistream}static getContentTypeFromFindType(e){const t=u.findTypes[u.findTypeHtml],s=u.findTypes[u.findTypeMusic],r=u.findTypes[u.findTypeVideo];let n;if(e&&""!==e){let i="";e.indexOf(";")>0&&(i=e.split(";")[0]),(t.includes(e)||t.includes(i))&&(n=u.findTypeHtml),(s.includes(e)||s.includes(i))&&(n=u.findTypeMusic),(r.includes(e)||r.includes(i))&&(n=u.findTypeVideo)}return n}static getFindTypeFromSrc(e){const t=a.default.getMediaTypeFromSrc(e);return t.charAt(0).toUpperCase()+t.slice(1)}}t.default=u},5300:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(1216));class i extends n.default{constructor(e={}){return super(),this.create(e)}static getMergedThreads(e,t){return e[t.ch]={...t},e}}t.default=i},3379:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(1216));class i extends n.default{constructor(e={}){return super(),e}}t.default=i},6548:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(1216)),i=r(s(1960));class o extends n.default{static get defaultOffsetFindId(){return i.default.defaultFindId}constructor(e={}){super();const t=e&&e.uid?e.uid:"",s=e&&e.utype?e.utype:"",r=e&&e.tunedCh?e.tunedCh:"",n=!(!e||!e.multistreamed)&&e.multistreamed,i=e&&e.actioned?e.actioned:"",a=e&&e.offsetFindId?e.offsetFindId:o.defaultOffsetFindId,u=e&&e.offsetSingleFindId?e.offsetSingleFindId:o.defaultOffsetFindId,c=e&&e.offsetMultiFindId?e.offsetMultiFindId:o.defaultOffsetFindId,d=e&&e.offsetChildFindId?e.offsetChildFindId:o.defaultOffsetFindId,l=e&&e.offsetLogsFindId?e.offsetLogsFindId:o.defaultOffsetFindId;return e.requestLoginType&&e.requestLoginType,this.create({uid:t,utype:s,tunedCh:r,multistreamed:n,actioned:i,offsetFindId:a,offsetSingleFindId:u,offsetMultiFindId:c,offsetChildFindId:d,offsetLogsFindId:l,friends:[]})}static getOffsetFindId({posts:e}){return e&&e[0]&&e[0]._id?e[0]._id:i.default.defaultFindId}static getHref(e={}){return"undefined"!=typeof window&&window.location&&window.location.href,e&&e.href?e.href:"/"}}t.default=o},4644:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=s(665),i=r(s(8267)),o=r(s(9530));t.default=function(e={}){let t=[i.default.updateAction];return n.createStore(o.default,e,n.applyMiddleware(...t))}},2230:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(3560)),i=r(s(2802)),o=r(s(4817)),a=r(s(367)),u=r(s(5232)),c=r(s(6423)),d=r(s(3443)),l=r(s(3364)),h=r(s(5537)),p=r(s(3379)),f=r(s(6548));class T{constructor(e,t={}){this.bootOption=e,this.ranks=new l.default,this.menuLogs=new a.default(t.menuLogs),this.posts=new u.default,this.postsMulti=new u.default,this.postsSingle=new u.default,this.postsChild=new u.default,this.postsTimeline=new c.default,this.postsTimelineStock=new d.default,this.postsLogs=new u.default,this.analyze=new i.default,this.thread=new h.default(this.bootOption,t.thread),this.threadDetail=new h.default(this.bootOption,t.thread),this.app=new o.default(T.getAppParams(this.thread,this.bootOption,t)),this.tuneCh=new p.default,this.user=new f.default(T.getUserParams(this,t)),this.actionLog=new n.default}static getAppParams(e,t,s){return{isTransition:!0,rootTitle:e.title,...t,...e}}static getUserParams(e,t){return t&&t.user&&t.user.uid?{...t.user}:{dispThreadType:e.thread.ch===e.app.rootCh?o.default.dispThreadTypeMulti:o.default.dispThreadTypeSingle}}get ch(){return this.thread.ch}}t.default=T},4039:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(1223)),i=r(s(7771)),o=r(s(5741));class a{constructor(e){this.onMessage=this.onMessage.bind(this),this.onMessageError=this.onMessageError.bind(this),this.postMessage=this.postMessage.bind(this),this.worker=e,this.worker.onerror=this.onMessageError,this.worker.onmessage=this.onMessage,this.ws=new o.default(this)}postMessage(e,t={},s){const r={id:this.id,type:n.default.WSAPI_TO_CLIENT_TYPE,ioType:i.default.API_SETUP,method:e,params:t,methodBack:s};this.worker.postMessage(r)}onMessage(e){const{id:t,type:s,ioType:r,method:i,params:o}=e.data;s===n.default.CLIENT_TO_WSAPI_TYPE&&this.ws.exe(i,o)}onMessageError(e){console.warn(e)}}t.default=a,new a(self)},1223:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.HandleRequestMethod=t.HandleMessageMethod=void 0;const n=r(s(7771));t.default=class{static get HANDLE_CLIENT_AND_WSAPI(){return"HANDLE_CLIENT_AND_WSAPI"}static get WSAPI_TO_CLIENT_TYPE(){return"WSAPI_TO_CLIENT_TYPE"}static get CLIENT_TO_WSAPI_TYPE(){return"CLIENT_TO_WSAPI_TYPE"}static get HANDLE_API_AND_CLIENT(){return"HANDLE_API_AND_CLIENT"}static get API_TO_CLIENT_TYPE(){return"API_TO_CLIENT_TYPE"}static get CLIENT_TO_API_TYPE(){return"CLIENT_TO_API_TYPE"}static get HANDLE_EXT_AND_API(){return"HANDLE_EXT_AND_API"}static get MEDIA_TO_CLIENT_TYPE(){return"MEDIA_TO_CLIENT_TYPE"}static get EXT_TO_API_TYPE(){return"EXT_TO_API_TYPE"}static get HANDLE_EXT_AND_CLIENT(){return"handleExtAndClient"}static get CLIENT_TO_EXT_TYPE(){return"CLIENT_TO_EXT_TYPE"}static get EXT_TO_CLIENT_TYPE(){return"EXT_TO_CLIENT_TYPE"}static get HANDLE_MEDIA_SERVER_AND_MEDIA_CLIENT(){return"handleMediaServerAndMediaClient"}static get MEDIA_SERVER_TO_MEDIA_CLIENT_TYPE(){return"MEDIA_SERVER_TO_MEDIA_CLIENT_TYPE"}static get MEDIA_CLIENT_TO_MEDIA_SERVER_TYPE(){return"MEDIA_CLIENT_TO_MEDIA_SERVER_TYPE"}static convertApiToClientActionType(e){return 0===e.indexOf(n.default.API_TO_SERVER_REQUEST)?e.replace(n.default.API_TO_SERVER_REQUEST,n.default.API_TO_CLIENT_REQUEST):0===e.indexOf(n.default.SERVER_TO_API_EMIT)?e.replace(n.default.SERVER_TO_API_EMIT,n.default.API_TO_CLIENT_EMIT):0===e.indexOf(n.default.SERVER_TO_API_BROADCAST)?e.replace(n.default.SERVER_TO_API_BROADCAST,n.default.API_TO_CLIENT_BROADCAST):`API_TO_CLIENT[ACTION]:${e}`}static getMessageTypes(e){const t=e.split(":");return{ioType:t[0].split("[")[1].replace("]",""),exeMethod:t[1]}}static convertExtToClientActionType(e){return`EXT_TO_CLIENT[ACTION]:${e}`}},t.HandleMessageMethod="handle",t.HandleRequestMethod="handle"},1216:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s{constructor(e={}){}static getType(e){return null===e?"Null":void 0===e?"Undefined":e.constructor.name}static isSet(e){return"Undefined"!==s.getType(e)&&"Null"!==s.getType(e)}static getBool(e){return"boolean"==typeof e?e:"true"===e}static isAnonymousFunc(e){const t=e.toString();return"function(){}"===t||"function() {}"===t||"function (){}"===t||"function () {}"===t||"()=>{}"===t}create(e){const t=this.constructor.name;return s.getType(e),Object.keys(e).forEach((r=>{let n,i,o=null,a=!1,u=!1,c=()=>{},d=null;if("Object"===s.getType(e[r])){n=e[r];let t=0===Object.keys(n).length;a=n.isAcceptNull?n.isAcceptNull:a,u=n.isAcceptBlank?n.isAcceptBlank:u,o=!t&&n.def?n.def:o,d=t||!n.value&&""!==n.value?n:n.value,d=t&&o?o:d,i=s.getType(d),c=n.valid?n.valid:c}else d=e[r],o=d,a=a,u=u,i=s.getType(d),c=c;const l=e=>{let n=null;const o=`${t}.${r}`,l=d,h=i,p=e,f=s.getType(e);return f!==i&&(n=`SCHEMA_TYPE : ${o} [validType: ${i}][paramsType: ${f}]`),a&&null===e&&(n=`SCHEMA_IS_ACCEPT_NULL :  ${o}`),u&&""===e&&(n=`SCHEMA_IS_ACCEPT_BLANK :  ${o}`),"Function"===s.getType(c)&&c(e)&&(n=`SCHEMA_YOUR_VALID_METHOD :  ${o}`),{pointer:o,validValue:l,validType:h,paramsValue:p,paramsType:f,error:n}},{pointer:h,validValue:p,validType:f,paramsValue:T,paramsType:E,error:_}=l(d);if(null===_)Object.defineProperty(this,r,{get:()=>d,set:e=>{const t=l(d);if(null===_)return d=e,{...this,[r]:d};throw this.validWarn(t),_},enumerable:!0,configurable:!0});else{if(this.errorThrow)throw _;console.warn(_)}})),this}canSet(e,t){try{const s=this[e];if(void 0===s)return!0;if(null===s)return!0;if(void 0===t)return!0;if(null===t)return!0;const{error:r}=this[e]=t;return!r&&(this[e]=s,!0)}catch(s){throw console.warn("BAD CAN SET KEY: "+this.constructor.name+" "+e),console.warn("BEFOER VALUE"),console.warn(typeof this[e]),console.warn(this[e]),console.warn("AFTER VALUE"),console.warn(typeof t),console.warn(t),`BAD CAN SET: ${s}`}}merge(e={},t=!0){try{const r=s.getType(e),n=Object.keys(e);if(n.length>0){let s={...this};return n.forEach((t=>{this[t]!==e[t]&&(this.canSet(t,e[t])?s[t]=e[t]:console.warn("BAD MERGE A : "+t+" "+e[t]+" "+typeof e[t]))})),"Array"===r?(s=Object.values(s),t?new this.constructor(s):s):t?new this.constructor(s):s}return new this.constructor}catch(t){if(this.errorThrow)throw console.warn(e),console.warn(t),`BAD MERGE B : ${s.getType(e)} ${t}`;return console.warn(e),console.warn(t),console.warn(`BAD MERGE C : ${s.getType(e)} ${t}`),e}}toJSON(e=this){let t={};return Object.keys(e).forEach((s=>{let r=e[s];"Object"===r.constructor.name&&(r.type||r.default||(r=this.toJSON(r))),r.default||""===r.default||0===r.default?t[s]=r.default:t[s]=r})),t}forEach(e){return Object.values(this).forEach(e)}concat(e){return this.returnImmutable(Object.values(this).concat(e),e)}map(e){return this.returnImmutable(Object.values(this).map(e),e)}filter(e){return this.returnImmutable(Object.values(this).filter(e),e)}reduce(e){return this.returnImmutable(Object.values(this).reduce(e),e)}find(e){return Object.values(this).find(e)}sort(e){return Object.values(this).sort(e)}push(e){const t=Object.values(this);return t.push(e),this.returnImmutable(t)}unshift(e){const t=Object.values(this);return t.unshift(e),this.returnImmutable(t)}getShift(){const e=Object.values(this).shift();return this.returnImmutable(e)}pop(e){const t=Object.values(this);return t.pop(e),this.returnImmutable(t)}returnImmutable(e,t=(()=>{})){return void 0===e?new this.constructor:0===e.length&&0===Object.keys(this).length?String(t).indexOf("createElement")>0?[]:new this.constructor(e):e[0]&&e[0].$$typeof&&"Symbol"===e[0].$$typeof.constructor.name?e:new this.constructor(e)}validWarn(e){console.warn("##########################"),console.warn("#"+e.pointer),console.warn("##########################"),console.warn("### initializedValidType"),console.warn(e.validType),console.warn("### initializedValidValue"),console.warn(e.validValue),console.warn("### paramsType"),console.warn(e.paramsType),console.warn("### paramsValue"),console.warn(e.paramsValue),console.warn("##########################")}}t.default=s},7771:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(1216));class i{static get TALKN_PROTOCOL(){return"talkn:"}static get HTTP_PROTOCOL(){return"http:"}static get HTTPS_PROTOCOL(){return"https:"}static get UNKNOWN_PROTOCOL(){return"????:"}static get CATCH_ME_KEY(){return"@CATCH_ME"}static get API_SEPARATE_IO_TYPE_START(){return"["}static get API_SEPARATE_IO_TYPE_END(){return"]"}static get API_REQUEST_TYPE(){return"REQUEST"}static get API_RESPONSE_TYPE_EMIT(){return"EMIT"}static get API_RESPONSE_TYPE_BROADCAST(){return"BROADCAST"}static get API_SETUP(){return"API_SETUP"}static get UNKNOWN(){return"UNKNOWN"}static get CONNECTION_SERVER_KEY(){return"CONNECTION_SERVER"}static get API_TO_SERVER_REQUEST(){return`API_TO_SERVER[${i.API_REQUEST_TYPE}]${i.METHOD_COLON}`}static get SERVER_TO_API_EMIT(){return`SERVER_TO_API[${i.API_RESPONSE_TYPE_EMIT}]${i.METHOD_COLON}`}static get SERVER_TO_API_BROADCAST(){return`SERVER_TO_API[${i.API_RESPONSE_TYPE_BROADCAST}]${i.METHOD_COLON}`}static get API_TO_CLIENT_REQUEST(){return`API_TO_CLIENT[${i.API_REQUEST_TYPE}]${i.METHOD_COLON}`}static get API_TO_CLIENT_EMIT(){return`API_TO_CLIENT[${i.API_RESPONSE_TYPE_EMIT}]${i.METHOD_COLON}`}static get API_TO_CLIENT_BROADCAST(){return`API_TO_CLIENT[${i.API_RESPONSE_TYPE_BROADCAST}]${i.METHOD_COLON}`}static get API_BROADCAST_CALLBACK(){return"tune"}static get REDUX_ACTION_KEY(){return"type"}static get METHOD_COLON(){return":"}static get ADD_CLIENT_ACTION_PREFIX(){return"API_TO_CLIENT"}static get map(){return{tune:{requestPublicState:{},requestPrivateState:{thread:["ch","hasSlash","protocol"],app:["multistream","rootCh","dispThreadType","actioned","offsetFindId","isToggleMultistream"]},responseEmitState:{user:["uid"],setting:"*",thread:"*"},responseBroadcastState:{thread:["liveCnt","ch"]}},fetchPosts:{requestPublicState:{},requestPrivateState:{thread:["ch","protocol","host","hasSlash"],app:["multistream","rootCh","dispThreadType","actioned","offsetFindId","isToggleMultistream"]},responseEmitState:{posts:"*",thread:"*"},responseBroadcastState:{}},getMore:{requestPublicState:{},requestPrivateState:{thread:["ch"],app:["multistream","dispThreadType","offsetFindId"]},responseEmitState:{app:["dispThreadType","offsetFindId"],posts:"*"},responseBroadcastState:{}},updateThread:{requestPublicState:{},requestPrivateState:{thread:["ch","protocol","host","hasSlash"]},responseEmitState:{thread:"*"},responseBroadcastState:{}},changeThread:{requestPublicState:{},requestPrivateState:{thread:["ch","hasSlash","protocol"],app:["tunedCh","multistream","rootCh","dispThreadType","actioned","offsetFindId","isToggleMultistream"]},responseEmitState:{thread:"*"},responseBroadcastState:{thread:["liveCnt","ch"]}},changeThreadDetail:{requestPublicState:{},requestPrivateState:{thread:["ch"]},responseEmitState:{thread:"*"},responseBroadcastState:{}},addFindChild:{requestPublicState:{},requestPrivateState:{thread:["ch"]},responseEmitState:{thread:"*"},responseBroadcastState:{}},rank:{requestPublicState:{},requestPrivateState:{app:["findType","rootCh","isRankDetailMode"]},responseEmitState:{rank:"*"},responseBroadcastState:{}},post:{requestPublicState:{},requestPrivateState:{user:["uid","utype"],app:["inputPost","inputStampId","inputCurrentTime","dispThreadType"],thread:["findType","title","protocol","ch","chs","emotions","favicon","contentType"]},responseEmitState:{},responseBroadcastState:{posts:"*",thread:["ch","emotions","postCnt"],user:["uid"]}},updateThreadServerMetas:{requestPublicState:{thread:["serverMetas"]},requestPrivateState:{thread:["host","protocol","ch"],user:["uid"]},responseEmitState:{thread:"*"},responseBroadcastState:{}},disconnect:{requestPublicState:{},requestPrivateState:{},responseEmitState:{},responseBroadcastState:{thread:["liveCnt","ch"]}}}}static getSequenceActionMap(e){const t=e.split(i.METHOD_COLON),s=t[0].split("[")[0];let r;return r=t[0].indexOf(`[${i.API_REQUEST_TYPE}]`)>0?i.API_REQUEST_TYPE:t[0].indexOf(`[${i.API_RESPONSE_TYPE_EMIT}]`)>0?i.API_RESPONSE_TYPE_EMIT:i.API_RESPONSE_TYPE_BROADCAST,{sequence:s,actionType:r,actionName:t[1]}}static updateCallbackExeConditionMap(e){let t={emit:!0,broadcast:!0};return i.map[e]&&(t.emit=!(Object.keys(i.map[e].responseEmitState).length>0),t.broadcast=!(Object.keys(i.map[e].responseBroadcastState).length>0)),t}static convertServerToApiIoType(e,t){return t.indexOf(`${i.API_SEPARATE_IO_TYPE_START}${i.API_REQUEST_TYPE}${i.API_SEPARATE_IO_TYPE_END}`)>=0?i.API_REQUEST_TYPE:t.indexOf(`${i.API_SEPARATE_IO_TYPE_START}${i.API_RESPONSE_TYPE_BROADCAST}${i.API_SEPARATE_IO_TYPE_END}`)>=0?i.API_RESPONSE_TYPE_BROADCAST:t.indexOf(`${i.API_SEPARATE_IO_TYPE_START}${i.API_RESPONSE_TYPE_EMIT}${i.API_SEPARATE_IO_TYPE_END}`)>=0?i.API_RESPONSE_TYPE_EMIT:i.API_SETUP}static convertExtToClientActionType(e,t){return i.convertApiToClientActionType(t)}static convertApiToClientActionType(e){return 0===e.indexOf(i.API_TO_SERVER_REQUEST)?e.replace(i.API_TO_SERVER_REQUEST,i.API_TO_CLIENT_REQUEST):0===e.indexOf(i.SERVER_TO_API_EMIT)?e.replace(i.SERVER_TO_API_EMIT,i.API_TO_CLIENT_EMIT):0===e.indexOf(i.SERVER_TO_API_BROADCAST)?e.replace(i.SERVER_TO_API_BROADCAST,i.API_TO_CLIENT_BROADCAST):e}static getRequestState(e,t,s){const r=e.replace(i.API_TO_SERVER_REQUEST,""),{requestPublicState:o,requestPrivateState:a}=i.map[r];let u={[i.REDUX_ACTION_KEY]:r};return Object.keys(a).forEach((e=>{u[e]||(u[e]={}),a[e].forEach((r=>{if(!u[e][r]){let i=t[e][r];s&&s[e]&&n.default.isSet(s[e][r])&&(i=s[e][r]),u[e][r]=i}}))})),Object.keys(o).forEach((e=>{u[e]||(u[e]={}),o[e].forEach((t=>{u[e][t]||(u[e][t]=s)}))})),u}static getResponseState(e,t,s){const r=t.type,n=i.map[r][`response${e}State`];let o={[i.REDUX_ACTION_KEY]:r};return Object.keys(n).forEach((e=>{if(!s[e])throw`SEQUENCE ERROR: NO_UPDATE_STATE_KEY: ${t.type}: ${e}`;{const r=n[e];let i=s[e];switch(i.constructor.name){case"model":i=i.toJSON(),delete i._id,delete i.__v}"*"===r?o={...o,[e]:i}:r.forEach((r=>{if(void 0===s[e][r])throw`SEQUENCE ERROR: NO_UPDATE_STATE_COLUMN_NAME: ${t.type}: ${e}.${r}`;o={...o,[e]:{...o[e],[r]:s[e][r]}}}))}})),o}static getRequestActionState(e,t=null,s=null){return"string"==typeof t&&null===s?{type:e}:"object"==typeof t&&"object"==typeof s?{...t,...s,type:e}:"string"==typeof t&&"object"==typeof s?{...s,type:e}:{...t,type:e}}}t.default=i},300:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(6894)),i=r(s(8399)),o=r(s(1665)),{PRODUCTION:a,DEVELOPMENT:u,PRODUCTION_DOMAIN:c,DEVELOPMENT_DOMAIN:d,SUB_DOMAINS:l,PORTS:h}=o.default,p=n.default.hasOwnProperty("hostname")?n.default.hostname():d,f=function(e){if("browser"===i.default.title){if(location.href.indexOf(o.default.DEVELOPMENT_DOMAIN)>=0){const e=Number(location.port);return e===o.default.PORTS.DEVELOPMENT_CLIENT||e===o.default.PORTS.DEVELOPMENT_API||e===o.default.PORTS.DEVELOPMENT_COVER||e===o.default.PORTS.DEVELOPMENT_COMPONENTS||e===o.default.PORTS.DEVELOPMENT_TUNE?o.default.DEVELOPMENT:o.default.LOCALHOST}return o.default.PRODUCTION}return e.indexOf(o.default.AWS_HOST_KEY)>=0?o.default.PRODUCTION:o.default.DEVELOPMENT}(p),T={client:"talkn.client.js",api:"talkn.api.js",wsWorker:"ws.api.worker.js",ext:"talkn.ext.js",cover:"talkn.cover.js",tune:"talkn.tune.js",components:"talkn.components.js"},E=f===u,_=f===a?c:d,g=`${l.WWW}.${_}`,y=`${l.COVER}.${_}`,m=`${l.API}.${_}`,C=E?`${_}:${h.DEVELOPMENT_API}/${T.api}`:`${m}/v1`,S=E?`${_}:${h.DEVELOPMENT_CLIENT}/${T.client}`:`${l.CLIENT}.${_}`,P=`${l.DESC}.${_}`,O=`${l.PORTAL}.${_}`,I=`${l.ASSETS}.${_}`,A=`${l.AUTO}.${_}`,b=`${l.EXT}.${_}`,R=`${l.COMP}.${_}`,v=`${l.OWN}.${_}`,M=`${l.NEWS}.${_}`,w=`${l.TUNE}.${_}`,D=`${l.COMPONENTS}.${_}`,L=`${I}/img/`,N={domain:_,isDev:E,env:f,files:T,hostName:p,apiURL:m,apiAccessURL:C,coverURL:y,wwwURL:g,descURL:P,portalURL:O,clientURL:S,assetsURL:I,autoURL:A,extURL:b,compURL:R,ownURL:v,newsURL:M,tuneURL:w,bannerURL:`${l.BANNER}.${_}`,componentsURL:D,transactionURL:`${l.TRANSACTION}.${_}`,assetsImgPath:L,assetsCoverPath:`${I}/cover/`,assetsIconPath:`${I}/icon/`,assetsJsPath:`${I}/js/`,sessionURL:`${l.SESSION}.${_}`,description:"talkn can share comments with users watching the same WEB page. Please enjoy the world of talkn.",apiVer:1,lpLanguages:["en","zh","ja","de","fr","hi","pt","it","ru","ko","es","id","tr","nl","ar","zh-TW","pl","sv","th","fa","nn","ga","he","mr"],defaultBirthdayUnixtime:1e12,findOneThreadActiveHour:1,findOnePostCnt:30,findOneLimitCnt:300,ogpImages:{Html:`//${L}talkn_logo_html.png`,Music:`//${L}talkn_logo_music.png`,Video:`//${L}talkn_logo_video.png`},defaultFavicon:`//${l.ASSETS}.${_}/favicon.ico`};t.default={...N}},1665:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(8399)),i={APP_NAME:"talkn",PRODUCTION:"PRODUCTION",LOCALHOST:"LOCALHOST",DEVELOPMENT:"DEVELOPMENT",PRODUCTION_IP:n.default.env.HOSTNAME?n.default.env.HOSTNAME:"localhost",PRODUCTION_DOMAIN:"talkn.io",DEVELOPMENT_DOMAIN:"localhost",AWS_HOST_KEY:"ec2.internal",PORTS:{HTTP:80,HTTPS:443,DEVELOPMENT_COVER:8e3,DEVELOPMENT_API:8001,DEVELOPMENT_COMPONENTS:8002,DEVELOPMENT_TUNE:8003,DEVELOPMENT_CLIENT:8080,REDIS:6379,MONGO:27017,SOCKET_IO:10443},SUB_DOMAINS:{WWW:"www",API:"api",DESC:"desc",PORTAL:"portal",CLIENT:"client",ASSETS:"assets",SESSION:"session",AUTO:"auto",OWN:"own",NEWS:"news",BANNER:"banner",COVER:"cover",RANK:"rank",EXT:"ext",COMPONENTS:"components",TUNE:"tune",TRANSACTION:"transaction"},APP_TYPES:{CLIENT:"CLIENT",PORTAL:"PORTAL",EXTENSION:"EXTENSION",API:"API",COVER:"COVER",COMPONENTS:"COMPONENTS",TUNE:"TUNE"},URL:{twitter:"https://twitter.com/",facebook:"https://www.facebook.com/",appstore:"https://itunes.apple.com/app/id",playstore:"https://play.google.com/store/apps/details?id=",chromeExtension:"https://chrome.google.com/webstore/detail/talkn-for-chrome/dkngnmdlcofambpfaccepbnjgfholgbo?hl=en"},talknClientJs:"talkn.client.js",talknApiJs:"talkn.api.js",talknRankJs:"talkn.rank.js",noInnerNotif:"Sorry, No Function.",bannerClass:"talkn_banner",storageKey:{baseKey:"@talkn@",postsTimelineZero:"postsTimelineZero",postsTimeline:"postsTimeline",postsSingle:"postsSingle",postsMulti:"postsMulti",postsChild:"postsChild",postsLogs:"postsLogs",threads:"threads"}};t.default=i},3365:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(1025));class i{constructor(e=""){this.belongCoverTypes={},this.idKeyTypes={},this.typesArray=[],Object.keys(i.inputs).forEach((e=>{i.inputs[e].forEach((t=>{this.belongCoverTypes[t]=e}))})),Object.keys(i.TYPES).forEach((e=>{this.typesArray.push(e);const t=i.TYPES[e];this.idKeyTypes[t.ID]=t.LABEL})),this.model=n.default,this.balances={plain:n.default.Plain.getSaveBalance,russell:n.default.Russell.getSaveBalance,russellSimple:n.default.RussellSimple.getSaveBalance}}static get defaultModelKey(){return"russellSimple"}static get TYPES(){return{LIKE:{ID:1,LABEL:"Like"},INTEREST:{ID:1002,LABEL:"Interest"},DISCOVERY:{ID:1003,LABEL:"Discovery"},SUNNY:{ID:1004,LABEL:"Sunny"},PEACE:{ID:1005,LABEL:"Peace"},CHEER:{ID:1006,LABEL:"Cheer"},MONEY:{ID:1007,LABEL:"Money"},UNLIKE:{ID:2001,LABEL:"Unlike"},LOVE:{ID:3e3,LABEL:"Love"},SUPRISE:{ID:10001,LABEL:"Surprise"},EXCITE:{ID:10002,LABEL:"Excite"},HAPPY:{ID:10003,LABEL:"Happy"},JOY:{ID:10004,LABEL:"Joy"},GLAD:{ID:20001,LABEL:"Glad"},SATISFACTION:{ID:20002,LABEL:"Satisfaction"},COMFORT:{ID:30001,LABEL:"Comfort"},RELAX:{ID:30002,LABEL:"Relax"},TIRED:{ID:30003,LABEL:"Tired"},SLEEPY:{ID:50001,LABEL:"Sleepy"},SLACK:{ID:60001,LABEL:"Slack"},BORING:{ID:60002,LABEL:"Boring"},MELANCHOLY:{ID:70001,LABEL:"Melancholy"},SAD:{ID:70002,LABEL:"Sad"},UNPLEASANT:{ID:70003,LABEL:"Unpleasant"},FRUSTRATED:{ID:70004,LABEL:"Frustrated"},DISSATISFIED:{ID:80001,LABEL:"Dissatisfied"},ANGER:{ID:80002,LABEL:"Anger"},WORRY:{ID:80003,LABEL:"Worry"},FEAR:{ID:80004,LABEL:"Fear"},WORRY_FEAR:{ID:80005,LABEL:"Worry&Fear"}}}static getGraphMaxNum(e=i.defaultModelKey,t=0,s=!0){let r=0,n={};switch(e){case"plain":n={1:1,5:2,10:3,30:4,70:5,100:6,250:7,500:8,750:9,1e3:10};break;case"russellSimple":n={6:5,10:5,20:5,30:5,50:5};break;case"russell":n={1:1,5:2,10:3,30:4,70:5,100:6,250:7,500:8,750:9,1e3:10}}const o=Object.keys(n),a=o.length-1;for(let e=0;e<a;e++){const s=o[e],i=n[s];if(s>t)break;r=i}return s?r+1:r}static get inputs(){return{[i.TYPES.LIKE.LABEL]:[1,2,3,4,5],[i.TYPES.MONEY.LABEL]:[100],[i.TYPES.EXCITE.LABEL]:[1101,1102,1103,1001,1002],[i.TYPES.HAPPY.LABEL]:[1201,1202,1203,1204,1301,1302,1303,1304,1305,1306,1307],[i.TYPES.JOY.LABEL]:[1401,1402,1501,1502,1503,1504],[i.TYPES.RELAX.LABEL]:[1601,1602,1603,1701,1702,1703,1801,1802,1803],[i.TYPES.SLACK.LABEL]:[2001,2002,2003,2004,2005,2101,2102,2103],[i.TYPES.MELANCHOLY.LABEL]:[2301,2302,2303,2201,2202,2203,2204,2205,2401,2402,2403,2404,2501,2502,2503],[i.TYPES.ANGER.LABEL]:[2701,2702,2703,2704,2705,2706,2601,2602],[i.TYPES.WORRY_FEAR.LABEL]:[2904,2905,2906,2801,2802,2803,2804,2805,2806,2901,2903]}}static get map(){return{1:"👍",2:"✌️",3:"👀",4:"💡",5:"💪",10:"",100:"💵",1001:"😳",1002:"😵",1101:"🤣",1102:"😆",1103:"🤩",1201:"💓",1202:"🥰",1203:"😍",1204:"😻",1301:"😄",1302:"✨",1303:"😁",1304:"🍺",1305:"😊",1306:"😘",1307:"🌟",1401:"🥳",1402:"😃",1501:"😋",1502:"🎂",1503:"🍰",1504:"🧁",1601:"😌",1602:"🤤",1603:"😉",1701:"🙂",1702:"☕️",1703:"🍵",1801:"😐",1802:"😮",1803:"😯",2001:"😅",2002:"💦",2003:"🥺",2004:"😲",2005:"🙄",2101:"😒",2102:"😑",2103:"😕",2201:"😩",2202:"😞",2203:"😔",2204:"😟",2205:"🤢",2301:"😭",2302:"😥",2303:"😿",2401:"🤕",2402:"🤒",2403:"😷",2404:"🤧",2501:"🧐",2502:"🤔",2503:"🤨",2601:"😠",2602:"😾",2701:"😡",2702:"🤬",2703:"💔",2704:"💢",2705:"😤",2706:"👿",2801:"😣",2802:"😫",2803:"😓",2804:"😖",2805:"😨",2806:"😰",2901:"🥶",2902:"🤮",2903:"🥵",2904:"😱",2905:"🙀",2906:"💀"}}}t.default=i},2703:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(3365));class i{static get TYPES(){return[n.default.TYPES.LIKE]}static getSaveBalance(e){const t={1:[{[n.default.TYPES.LIKE.ID]:1}]};return t[e]?t[e]:null}static getSchemas(){let e={};return i.TYPES.forEach(((t,s)=>{e[t.LABEL]={type:Number,default:0,min:0}})),e}}t.default=i},6663:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(3365));class i{constructor(e){this.typesArray=[],Object.keys(i.TYPES).forEach((e=>{this.typesArray.push(i.TYPES[e].LABEL)}))}static get TYPES(){return[n.default.TYPES.SUPRISE,n.default.TYPES.EXCITE,n.default.TYPES.HAPPY,n.default.TYPES.JOY,n.default.TYPES.GLAD,n.default.TYPES.SATISFACTION,n.default.TYPES.COMFORT,n.default.TYPES.RELAX,n.default.TYPES.TIRED,n.default.TYPES.SLEEPY,n.default.TYPES.SLACK,n.default.TYPES.BORING,n.default.TYPES.MELANCHOLY,n.default.TYPES.SAD,n.default.TYPES.UNPLEASANT,n.default.TYPES.FRUSTRATED,n.default.TYPES.DISSATISFIED,n.default.TYPES.ANGER,n.default.TYPES.WORRY,n.default.TYPES.FEAR]}static getSaveBalance(e){const t={1001:[{[n.default.TYPES.SUPRISE.ID]:1}],1002:[{[n.default.TYPES.SUPRISE.ID]:1}],1101:[{[n.default.TYPES.EXCITE.ID]:1}],1102:[{[n.default.TYPES.EXCITE.ID]:1}],1103:[{[n.default.TYPES.EXCITE.ID]:1}],1201:[{[n.default.TYPES.HAPPY.ID]:1}],1202:[{[n.default.TYPES.HAPPY.ID]:1}],1203:[{[n.default.TYPES.HAPPY.ID]:1}],1204:[{[n.default.TYPES.HAPPY.ID]:1}],1301:[{[n.default.TYPES.JOY.ID]:1}],1302:[{[n.default.TYPES.JOY.ID]:1}],1303:[{[n.default.TYPES.JOY.ID]:1}],1304:[{[n.default.TYPES.JOY.ID]:1}],1305:[{[n.default.TYPES.JOY.ID]:1}],1306:[{[n.default.TYPES.JOY.ID]:1}],1307:[{[n.default.TYPES.JOY.ID]:1}],1401:[{[n.default.TYPES.GLAD.ID]:1}],1402:[{[n.default.TYPES.GLAD.ID]:1}],1501:[{[n.default.TYPES.SATISFACTION.ID]:1}],1502:[{[n.default.TYPES.SATISFACTION.ID]:1}],1503:[{[n.default.TYPES.SATISFACTION.ID]:1}],1504:[{[n.default.TYPES.SATISFACTION.ID]:1}],1601:[{[n.default.TYPES.COMFORT.ID]:1}],1602:[{[n.default.TYPES.COMFORT.ID]:1}],1701:[{[n.default.TYPES.RELAX.ID]:1}],1702:[{[n.default.TYPES.RELAX.ID]:1}],1703:[{[n.default.TYPES.RELAX.ID]:1}],1801:[{[n.default.TYPES.TIRED.ID]:1}],1802:[{[n.default.TYPES.TIRED.ID]:1}],1803:[{[n.default.TYPES.TIRED.ID]:1}],2001:[{[n.default.TYPES.SLACK.ID]:1}],2002:[{[n.default.TYPES.SLACK.ID]:1}],2003:[{[n.default.TYPES.SLACK.ID]:1}],2004:[{[n.default.TYPES.SLACK.ID]:1}],2101:[{[n.default.TYPES.BORING.ID]:1}],2102:[{[n.default.TYPES.BORING.ID]:1}],2103:[{[n.default.TYPES.BORING.ID]:1}],2201:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2202:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2203:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2204:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2205:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2301:[{[n.default.TYPES.SAD.ID]:1}],2302:[{[n.default.TYPES.SAD.ID]:1}],2303:[{[n.default.TYPES.SAD.ID]:1}],2401:[{[n.default.TYPES.UNPLEASANT.ID]:1}],2402:[{[n.default.TYPES.UNPLEASANT.ID]:1}],2403:[{[n.default.TYPES.UNPLEASANT.ID]:1}],2404:[{[n.default.TYPES.UNPLEASANT.ID]:1}],2501:[{[n.default.TYPES.FRUSTRATED.ID]:1}],2502:[{[n.default.TYPES.FRUSTRATED.ID]:1}],2503:[{[n.default.TYPES.FRUSTRATED.ID]:1}],2601:[{[n.default.TYPES.DISSATISFIED.ID]:1}],2602:[{[n.default.TYPES.DISSATISFIED.ID]:1}],2701:[{[n.default.TYPES.ANGER.ID]:1}],2702:[{[n.default.TYPES.ANGER.ID]:1}],2703:[{[n.default.TYPES.ANGER.ID]:1}],2704:[{[n.default.TYPES.ANGER.ID]:1}],2705:[{[n.default.TYPES.ANGER.ID]:1}],2706:[{[n.default.TYPES.ANGER.ID]:1}],2801:[{[n.default.TYPES.WORRY.ID]:1}],2802:[{[n.default.TYPES.WORRY.ID]:1}],2803:[{[n.default.TYPES.WORRY.ID]:1}],2804:[{[n.default.TYPES.WORRY.ID]:1}],2805:[{[n.default.TYPES.WORRY.ID]:1}],2806:[{[n.default.TYPES.WORRY.ID]:1}],2807:[{[n.default.TYPES.WORRY.ID]:1}],2901:[{[n.default.TYPES.FEAR.ID]:1}],2902:[{[n.default.TYPES.FEAR.ID]:1}],2903:[{[n.default.TYPES.FEAR.ID]:1}],2904:[{[n.default.TYPES.FEAR.ID]:1}],2905:[{[n.default.TYPES.FEAR.ID]:1}],2906:[{[n.default.TYPES.FEAR.ID]:1}]};return t[e]?t[e]:null}static getSchemas(){let e={};return i.TYPES.forEach(((t,s)=>{e[t.LABEL]={type:Number,default:0,min:0}})),e}}t.default=i},3005:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(3365));class i{constructor(e){this.typesArray=[],Object.keys(i.TYPES).forEach((e=>{this.typesArray.push(i.TYPES[e].LABEL)}))}static get TYPES(){return[n.default.TYPES.EXCITE,n.default.TYPES.HAPPY,n.default.TYPES.JOY,n.default.TYPES.RELAX,n.default.TYPES.SLACK,n.default.TYPES.MELANCHOLY,n.default.TYPES.ANGER,n.default.TYPES.WORRY_FEAR]}static getSaveBalance(e){const t={1001:[{[n.default.TYPES.EXCITE.ID]:1}],1002:[{[n.default.TYPES.EXCITE.ID]:1}],1101:[{[n.default.TYPES.EXCITE.ID]:1}],1102:[{[n.default.TYPES.EXCITE.ID]:1}],1103:[{[n.default.TYPES.EXCITE.ID]:1}],1201:[{[n.default.TYPES.HAPPY.ID]:1}],1202:[{[n.default.TYPES.HAPPY.ID]:1}],1203:[{[n.default.TYPES.HAPPY.ID]:1}],1204:[{[n.default.TYPES.HAPPY.ID]:1}],1301:[{[n.default.TYPES.JOY.ID]:1}],1302:[{[n.default.TYPES.JOY.ID]:1}],1303:[{[n.default.TYPES.JOY.ID]:1}],1304:[{[n.default.TYPES.JOY.ID]:1}],1305:[{[n.default.TYPES.JOY.ID]:1}],1306:[{[n.default.TYPES.JOY.ID]:1}],1307:[{[n.default.TYPES.JOY.ID]:1}],1401:[{[n.default.TYPES.JOY.ID]:1}],1402:[{[n.default.TYPES.JOY.ID]:1}],1501:[{[n.default.TYPES.JOY.ID]:1}],1502:[{[n.default.TYPES.JOY.ID]:1}],1503:[{[n.default.TYPES.JOY.ID]:1}],1504:[{[n.default.TYPES.JOY.ID]:1}],1601:[{[n.default.TYPES.RELAX.ID]:1}],1602:[{[n.default.TYPES.RELAX.ID]:1}],1701:[{[n.default.TYPES.RELAX.ID]:1}],1702:[{[n.default.TYPES.RELAX.ID]:1}],1703:[{[n.default.TYPES.RELAX.ID]:1}],1801:[{[n.default.TYPES.TIRED.ID]:1}],1802:[{[n.default.TYPES.TIRED.ID]:1}],1803:[{[n.default.TYPES.TIRED.ID]:1}],2001:[{[n.default.TYPES.SLACK.ID]:1}],2002:[{[n.default.TYPES.SLACK.ID]:1}],2003:[{[n.default.TYPES.SLACK.ID]:1}],2004:[{[n.default.TYPES.SLACK.ID]:1}],2101:[{[n.default.TYPES.SLACK.ID]:1}],2102:[{[n.default.TYPES.SLACK.ID]:1}],2103:[{[n.default.TYPES.SLACK.ID]:1}],2201:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2202:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2203:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2204:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2205:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2301:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2302:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2303:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2401:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2402:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2403:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2404:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2501:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2502:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2503:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2601:[{[n.default.TYPES.ANGER.ID]:1}],2602:[{[n.default.TYPES.ANGER.ID]:1}],2701:[{[n.default.TYPES.ANGER.ID]:1}],2702:[{[n.default.TYPES.ANGER.ID]:1}],2703:[{[n.default.TYPES.ANGER.ID]:1}],2704:[{[n.default.TYPES.ANGER.ID]:1}],2705:[{[n.default.TYPES.ANGER.ID]:1}],2706:[{[n.default.TYPES.ANGER.ID]:1}],2801:[{[n.default.TYPES.WORRY_FEAR.ID]:1}],2802:[{[n.default.TYPES.WORRY_FEAR.ID]:1}],2803:[{[n.default.TYPES.WORRY_FEAR.ID]:1}],2804:[{[n.default.TYPES.WORRY_FEAR.ID]:1}],2805:[{[n.default.TYPES.WORRY_FEAR.ID]:1}],2806:[{[n.default.TYPES.WORRY_FEAR.ID]:1}],2807:[{[n.default.TYPES.WORRY_FEAR.ID]:1}],2901:[{[n.default.TYPES.WORRY_FEAR.ID]:1}],2902:[{[n.default.TYPES.WORRY_FEAR.ID]:1}],2903:[{[n.default.TYPES.WORRY_FEAR.ID]:1}],2904:[{[n.default.TYPES.WORRY_FEAR.ID]:1}],2905:[{[n.default.TYPES.WORRY_FEAR.ID]:1}],2906:[{[n.default.TYPES.WORRY_FEAR.ID]:1}]};return t[e]?t[e]:null}static getSchemas(){let e={};return i.TYPES.forEach(((t,s)=>{e[t.LABEL]={type:Number,default:0,min:0}})),e}}t.default=i},1025:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(2703)),i=r(s(6663)),o=r(s(3005));t.default={Plain:n.default,Russell:i.default,RussellSimple:o.default}},6894:(e,t,s)=>{e.exports=s(6894)},8399:e=>{var t,s,r=e.exports={};function n(){throw new Error("setTimeout has not been defined")}function i(){throw new Error("clearTimeout has not been defined")}function o(e){if(t===setTimeout)return setTimeout(e,0);if((t===n||!t)&&setTimeout)return t=setTimeout,setTimeout(e,0);try{return t(e,0)}catch(s){try{return t.call(null,e,0)}catch(s){return t.call(this,e,0)}}}!function(){try{t="function"==typeof setTimeout?setTimeout:n}catch(e){t=n}try{s="function"==typeof clearTimeout?clearTimeout:i}catch(e){s=i}}();var a,u=[],c=!1,d=-1;function l(){c&&a&&(c=!1,a.length?u=a.concat(u):d=-1,u.length&&h())}function h(){if(!c){var e=o(l);c=!0;for(var t=u.length;t;){for(a=u,u=[];++d<t;)a&&a[d].run();d=-1,t=u.length}a=null,c=!1,function(e){if(s===clearTimeout)return clearTimeout(e);if((s===i||!s)&&clearTimeout)return s=clearTimeout,clearTimeout(e);try{s(e)}catch(t){try{return s.call(null,e)}catch(t){return s.call(this,e)}}}(e)}}function p(e,t){this.fun=e,this.array=t}function f(){}r.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var s=1;s<arguments.length;s++)t[s-1]=arguments[s];u.push(new p(e,t)),1!==u.length||c||o(h)},p.prototype.run=function(){this.fun.apply(null,this.array)},r.title="browser",r.browser=!0,r.env={},r.argv=[],r.version="",r.versions={},r.on=f,r.addListener=f,r.once=f,r.off=f,r.removeListener=f,r.removeAllListeners=f,r.emit=f,r.prependListener=f,r.prependOnceListener=f,r.listeners=function(e){return[]},r.binding=function(e){throw new Error("process.binding is not supported")},r.cwd=function(){return"/"},r.chdir=function(e){throw new Error("process.chdir is not supported")},r.umask=function(){return 0}},7622:(e,t)=>{"use strict";function s(e){e=e||{},this.ms=e.min||100,this.max=e.max||1e4,this.factor=e.factor||2,this.jitter=e.jitter>0&&e.jitter<=1?e.jitter:0,this.attempts=0}Object.defineProperty(t,"__esModule",{value:!0}),t.Backoff=void 0,t.Backoff=s,s.prototype.duration=function(){var e=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var t=Math.random(),s=Math.floor(t*this.jitter*e);e=0==(1&Math.floor(10*t))?e-s:e+s}return 0|Math.min(e,this.max)},s.prototype.reset=function(){this.attempts=0},s.prototype.setMin=function(e){this.ms=e},s.prototype.setMax=function(e){this.max=e},s.prototype.setJitter=function(e){this.jitter=e}},1865:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.connect=t.io=t.Socket=t.Manager=t.protocol=void 0;const n=s(1576),i=s(4183);Object.defineProperty(t,"Manager",{enumerable:!0,get:function(){return i.Manager}});const o=s(5185);Object.defineProperty(t,"Socket",{enumerable:!0,get:function(){return o.Socket}});const a=r(s(4704)).default("socket.io-client"),u={};function c(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};const s=n.url(e,t.path||"/socket.io"),r=s.source,o=s.id,c=s.path,d=u[o]&&c in u[o].nsps;let l;return t.forceNew||t["force new connection"]||!1===t.multiplex||d?(a("ignoring socket cache for %s",r),l=new i.Manager(r,t)):(u[o]||(a("new io instance for %s",r),u[o]=new i.Manager(r,t)),l=u[o]),s.query&&!t.query&&(t.query=s.queryKey),l.socket(s.path,t)}t.io=c,t.connect=c,t.default=c,Object.assign(c,{Manager:i.Manager,Socket:o.Socket,io:c,connect:c});var d=s(8179);Object.defineProperty(t,"protocol",{enumerable:!0,get:function(){return d.protocol}}),e.exports=c},4183:function(e,t,s){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,s,r){void 0===r&&(r=s),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[s]}})}:function(e,t,s,r){void 0===r&&(r=s),e[r]=t[s]}),n=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var s in e)"default"!==s&&Object.prototype.hasOwnProperty.call(e,s)&&r(t,e,s);return n(t,e),t},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Manager=void 0;const a=s(9720),u=s(5185),c=i(s(8179)),d=s(2793),l=s(7622),h=s(8677),p=o(s(4704)).default("socket.io-client:manager");class f extends h.Emitter{constructor(e,t){var s;super(),this.nsps={},this.subs=[],e&&"object"==typeof e&&(t=e,e=void 0),(t=t||{}).path=t.path||"/socket.io",this.opts=t,a.installTimerFunctions(this,t),this.reconnection(!1!==t.reconnection),this.reconnectionAttempts(t.reconnectionAttempts||1/0),this.reconnectionDelay(t.reconnectionDelay||1e3),this.reconnectionDelayMax(t.reconnectionDelayMax||5e3),this.randomizationFactor(null!==(s=t.randomizationFactor)&&void 0!==s?s:.5),this.backoff=new l.Backoff({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()}),this.timeout(null==t.timeout?2e4:t.timeout),this._readyState="closed",this.uri=e;const r=t.parser||c;this.encoder=new r.Encoder,this.decoder=new r.Decoder,this._autoConnect=!1!==t.autoConnect,this._autoConnect&&this.open()}reconnection(e){return arguments.length?(this._reconnection=!!e,this):this._reconnection}reconnectionAttempts(e){return void 0===e?this._reconnectionAttempts:(this._reconnectionAttempts=e,this)}reconnectionDelay(e){var t;return void 0===e?this._reconnectionDelay:(this._reconnectionDelay=e,null===(t=this.backoff)||void 0===t||t.setMin(e),this)}randomizationFactor(e){var t;return void 0===e?this._randomizationFactor:(this._randomizationFactor=e,null===(t=this.backoff)||void 0===t||t.setJitter(e),this)}reconnectionDelayMax(e){var t;return void 0===e?this._reconnectionDelayMax:(this._reconnectionDelayMax=e,null===(t=this.backoff)||void 0===t||t.setMax(e),this)}timeout(e){return arguments.length?(this._timeout=e,this):this._timeout}maybeReconnectOnOpen(){!this._reconnecting&&this._reconnection&&0===this.backoff.attempts&&this.reconnect()}open(e){if(p("readyState %s",this._readyState),~this._readyState.indexOf("open"))return this;p("opening %s",this.uri),this.engine=new a.Socket(this.uri,this.opts);const t=this.engine,s=this;this._readyState="opening",this.skipReconnect=!1;const r=d.on(t,"open",(function(){s.onopen(),e&&e()})),n=d.on(t,"error",(t=>{p("error"),s.cleanup(),s._readyState="closed",this.emitReserved("error",t),e?e(t):s.maybeReconnectOnOpen()}));if(!1!==this._timeout){const e=this._timeout;p("connect attempt will timeout after %d",e),0===e&&r();const s=this.setTimeoutFn((()=>{p("connect attempt timed out after %d",e),r(),t.close(),t.emit("error",new Error("timeout"))}),e);this.opts.autoUnref&&s.unref(),this.subs.push((function(){clearTimeout(s)}))}return this.subs.push(r),this.subs.push(n),this}connect(e){return this.open(e)}onopen(){p("open"),this.cleanup(),this._readyState="open",this.emitReserved("open");const e=this.engine;this.subs.push(d.on(e,"ping",this.onping.bind(this)),d.on(e,"data",this.ondata.bind(this)),d.on(e,"error",this.onerror.bind(this)),d.on(e,"close",this.onclose.bind(this)),d.on(this.decoder,"decoded",this.ondecoded.bind(this)))}onping(){this.emitReserved("ping")}ondata(e){this.decoder.add(e)}ondecoded(e){this.emitReserved("packet",e)}onerror(e){p("error",e),this.emitReserved("error",e)}socket(e,t){let s=this.nsps[e];return s||(s=new u.Socket(this,e,t),this.nsps[e]=s),s}_destroy(e){const t=Object.keys(this.nsps);for(const e of t)if(this.nsps[e].active)return void p("socket %s is still active, skipping close",e);this._close()}_packet(e){p("writing packet %j",e);const t=this.encoder.encode(e);for(let s=0;s<t.length;s++)this.engine.write(t[s],e.options)}cleanup(){p("cleanup"),this.subs.forEach((e=>e())),this.subs.length=0,this.decoder.destroy()}_close(){p("disconnect"),this.skipReconnect=!0,this._reconnecting=!1,this.onclose("forced close"),this.engine&&this.engine.close()}disconnect(){return this._close()}onclose(e,t){p("closed due to %s",e),this.cleanup(),this.backoff.reset(),this._readyState="closed",this.emitReserved("close",e,t),this._reconnection&&!this.skipReconnect&&this.reconnect()}reconnect(){if(this._reconnecting||this.skipReconnect)return this;const e=this;if(this.backoff.attempts>=this._reconnectionAttempts)p("reconnect failed"),this.backoff.reset(),this.emitReserved("reconnect_failed"),this._reconnecting=!1;else{const t=this.backoff.duration();p("will wait %dms before reconnect attempt",t),this._reconnecting=!0;const s=this.setTimeoutFn((()=>{e.skipReconnect||(p("attempting reconnect"),this.emitReserved("reconnect_attempt",e.backoff.attempts),e.skipReconnect||e.open((t=>{t?(p("reconnect attempt error"),e._reconnecting=!1,e.reconnect(),this.emitReserved("reconnect_error",t)):(p("reconnect success"),e.onreconnect())})))}),t);this.opts.autoUnref&&s.unref(),this.subs.push((function(){clearTimeout(s)}))}}onreconnect(){const e=this.backoff.attempts;this._reconnecting=!1,this.backoff.reset(),this.emitReserved("reconnect",e)}}t.Manager=f},2793:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.on=void 0,t.on=function(e,t,s){return e.on(t,s),function(){e.off(t,s)}}},5185:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Socket=void 0;const n=s(8179),i=s(2793),o=s(8677),a=r(s(4704)).default("socket.io-client:socket"),u=Object.freeze({connect:1,connect_error:1,disconnect:1,disconnecting:1,newListener:1,removeListener:1});class c extends o.Emitter{constructor(e,t,s){super(),this.connected=!1,this.receiveBuffer=[],this.sendBuffer=[],this.ids=0,this.acks={},this.flags={},this.io=e,this.nsp=t,s&&s.auth&&(this.auth=s.auth),this.io._autoConnect&&this.open()}get disconnected(){return!this.connected}subEvents(){if(this.subs)return;const e=this.io;this.subs=[i.on(e,"open",this.onopen.bind(this)),i.on(e,"packet",this.onpacket.bind(this)),i.on(e,"error",this.onerror.bind(this)),i.on(e,"close",this.onclose.bind(this))]}get active(){return!!this.subs}connect(){return this.connected||(this.subEvents(),this.io._reconnecting||this.io.open(),"open"===this.io._readyState&&this.onopen()),this}open(){return this.connect()}send(...e){return e.unshift("message"),this.emit.apply(this,e),this}emit(e,...t){if(u.hasOwnProperty(e))throw new Error('"'+e+'" is a reserved event name');t.unshift(e);const s={type:n.PacketType.EVENT,data:t,options:{}};if(s.options.compress=!1!==this.flags.compress,"function"==typeof t[t.length-1]){const e=this.ids++;a("emitting packet with ack id %d",e);const r=t.pop();this._registerAckCallback(e,r),s.id=e}const r=this.io.engine&&this.io.engine.transport&&this.io.engine.transport.writable;return!this.flags.volatile||r&&this.connected?this.connected?(this.notifyOutgoingListeners(s),this.packet(s)):this.sendBuffer.push(s):a("discard packet as the transport is not currently writable"),this.flags={},this}_registerAckCallback(e,t){const s=this.flags.timeout;if(void 0===s)return void(this.acks[e]=t);const r=this.io.setTimeoutFn((()=>{delete this.acks[e];for(let t=0;t<this.sendBuffer.length;t++)this.sendBuffer[t].id===e&&(a("removing packet with ack id %d from the buffer",e),this.sendBuffer.splice(t,1));a("event with ack id %d has timed out after %d ms",e,s),t.call(this,new Error("operation has timed out"))}),s);this.acks[e]=(...e)=>{this.io.clearTimeoutFn(r),t.apply(this,[null,...e])}}packet(e){e.nsp=this.nsp,this.io._packet(e)}onopen(){a("transport is open - connecting"),"function"==typeof this.auth?this.auth((e=>{this.packet({type:n.PacketType.CONNECT,data:e})})):this.packet({type:n.PacketType.CONNECT,data:this.auth})}onerror(e){this.connected||this.emitReserved("connect_error",e)}onclose(e,t){a("close (%s)",e),this.connected=!1,delete this.id,this.emitReserved("disconnect",e,t)}onpacket(e){if(e.nsp===this.nsp)switch(e.type){case n.PacketType.CONNECT:if(e.data&&e.data.sid){const t=e.data.sid;this.onconnect(t)}else this.emitReserved("connect_error",new Error("It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)"));break;case n.PacketType.EVENT:case n.PacketType.BINARY_EVENT:this.onevent(e);break;case n.PacketType.ACK:case n.PacketType.BINARY_ACK:this.onack(e);break;case n.PacketType.DISCONNECT:this.ondisconnect();break;case n.PacketType.CONNECT_ERROR:this.destroy();const t=new Error(e.data.message);t.data=e.data.data,this.emitReserved("connect_error",t)}}onevent(e){const t=e.data||[];a("emitting event %j",t),null!=e.id&&(a("attaching ack callback to event"),t.push(this.ack(e.id))),this.connected?this.emitEvent(t):this.receiveBuffer.push(Object.freeze(t))}emitEvent(e){if(this._anyListeners&&this._anyListeners.length){const t=this._anyListeners.slice();for(const s of t)s.apply(this,e)}super.emit.apply(this,e)}ack(e){const t=this;let s=!1;return function(...r){s||(s=!0,a("sending ack %j",r),t.packet({type:n.PacketType.ACK,id:e,data:r}))}}onack(e){const t=this.acks[e.id];"function"==typeof t?(a("calling ack %s with %j",e.id,e.data),t.apply(this,e.data),delete this.acks[e.id]):a("bad ack %s",e.id)}onconnect(e){a("socket connected with id %s",e),this.id=e,this.connected=!0,this.emitBuffered(),this.emitReserved("connect")}emitBuffered(){this.receiveBuffer.forEach((e=>this.emitEvent(e))),this.receiveBuffer=[],this.sendBuffer.forEach((e=>{this.notifyOutgoingListeners(e),this.packet(e)})),this.sendBuffer=[]}ondisconnect(){a("server disconnect (%s)",this.nsp),this.destroy(),this.onclose("io server disconnect")}destroy(){this.subs&&(this.subs.forEach((e=>e())),this.subs=void 0),this.io._destroy(this)}disconnect(){return this.connected&&(a("performing disconnect (%s)",this.nsp),this.packet({type:n.PacketType.DISCONNECT})),this.destroy(),this.connected&&this.onclose("io client disconnect"),this}close(){return this.disconnect()}compress(e){return this.flags.compress=e,this}get volatile(){return this.flags.volatile=!0,this}timeout(e){return this.flags.timeout=e,this}onAny(e){return this._anyListeners=this._anyListeners||[],this._anyListeners.push(e),this}prependAny(e){return this._anyListeners=this._anyListeners||[],this._anyListeners.unshift(e),this}offAny(e){if(!this._anyListeners)return this;if(e){const t=this._anyListeners;for(let s=0;s<t.length;s++)if(e===t[s])return t.splice(s,1),this}else this._anyListeners=[];return this}listenersAny(){return this._anyListeners||[]}onAnyOutgoing(e){return this._anyOutgoingListeners=this._anyOutgoingListeners||[],this._anyOutgoingListeners.push(e),this}prependAnyOutgoing(e){return this._anyOutgoingListeners=this._anyOutgoingListeners||[],this._anyOutgoingListeners.unshift(e),this}offAnyOutgoing(e){if(!this._anyOutgoingListeners)return this;if(e){const t=this._anyOutgoingListeners;for(let s=0;s<t.length;s++)if(e===t[s])return t.splice(s,1),this}else this._anyOutgoingListeners=[];return this}listenersAnyOutgoing(){return this._anyOutgoingListeners||[]}notifyOutgoingListeners(e){if(this._anyOutgoingListeners&&this._anyOutgoingListeners.length){const t=this._anyOutgoingListeners.slice();for(const s of t)s.apply(this,e.data)}}}t.Socket=c},1576:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.url=void 0;const n=s(9720),i=r(s(4704)).default("socket.io-client:url");t.url=function(e,t="",s){let r=e;s=s||"undefined"!=typeof location&&location,null==e&&(e=s.protocol+"//"+s.host),"string"==typeof e&&("/"===e.charAt(0)&&(e="/"===e.charAt(1)?s.protocol+e:s.host+e),/^(https?|wss?):\/\//.test(e)||(i("protocol-less url %s",e),e=void 0!==s?s.protocol+"//"+e:"https://"+e),i("parse %s",e),r=n.parse(e)),r.port||(/^(http|ws)$/.test(r.protocol)?r.port="80":/^(http|ws)s$/.test(r.protocol)&&(r.port="443")),r.path=r.path||"/";const o=-1!==r.host.indexOf(":")?"["+r.host+"]":r.host;return r.id=r.protocol+"://"+o+":"+r.port+t,r.href=r.protocol+"://"+o+(s&&s.port===r.port?"":":"+r.port),r}},5778:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.hasCORS=void 0;let s=!1;try{s="undefined"!=typeof XMLHttpRequest&&"withCredentials"in new XMLHttpRequest}catch(e){}t.hasCORS=s},345:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.decode=t.encode=void 0,t.encode=function(e){let t="";for(let s in e)e.hasOwnProperty(s)&&(t.length&&(t+="&"),t+=encodeURIComponent(s)+"="+encodeURIComponent(e[s]));return t},t.decode=function(e){let t={},s=e.split("&");for(let e=0,r=s.length;e<r;e++){let r=s[e].split("=");t[decodeURIComponent(r[0])]=decodeURIComponent(r[1])}return t}},4544:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.parse=void 0;const s=/^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,r=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"];t.parse=function(e){const t=e,n=e.indexOf("["),i=e.indexOf("]");-1!=n&&-1!=i&&(e=e.substring(0,n)+e.substring(n,i).replace(/:/g,";")+e.substring(i,e.length));let o=s.exec(e||""),a={},u=14;for(;u--;)a[r[u]]=o[u]||"";return-1!=n&&-1!=i&&(a.source=t,a.host=a.host.substring(1,a.host.length-1).replace(/;/g,":"),a.authority=a.authority.replace("[","").replace("]","").replace(/;/g,":"),a.ipv6uri=!0),a.pathNames=function(e,t){const s=t.replace(/\/{2,9}/g,"/").split("/");return"/"!=t.substr(0,1)&&0!==t.length||s.splice(0,1),"/"==t.substr(t.length-1,1)&&s.splice(s.length-1,1),s}(0,a.path),a.queryKey=function(e,t){const s={};return t.replace(/(?:^|&)([^&=]*)=?([^&]*)/g,(function(e,t,r){t&&(s[t]=r)})),s}(0,a.query),a}},6796:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.yeast=t.decode=t.encode=void 0;const s="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""),r={};let n,i=0,o=0;function a(e){let t="";do{t=s[e%64]+t,e=Math.floor(e/64)}while(e>0);return t}for(t.encode=a,t.decode=function(e){let t=0;for(o=0;o<e.length;o++)t=64*t+r[e.charAt(o)];return t},t.yeast=function(){const e=a(+new Date);return e!==n?(i=0,n=e):e+"."+a(i++)};o<64;o++)r[s[o]]=o},7759:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.globalThisShim=void 0,t.globalThisShim="undefined"!=typeof self?self:"undefined"!=typeof window?window:Function("return this")()},9720:(e,t,s)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.parse=t.installTimerFunctions=t.transports=t.Transport=t.protocol=t.Socket=void 0;const r=s(6215);Object.defineProperty(t,"Socket",{enumerable:!0,get:function(){return r.Socket}}),t.protocol=r.Socket.protocol;var n=s(269);Object.defineProperty(t,"Transport",{enumerable:!0,get:function(){return n.Transport}});var i=s(5978);Object.defineProperty(t,"transports",{enumerable:!0,get:function(){return i.transports}});var o=s(9936);Object.defineProperty(t,"installTimerFunctions",{enumerable:!0,get:function(){return o.installTimerFunctions}});var a=s(4544);Object.defineProperty(t,"parse",{enumerable:!0,get:function(){return a.parse}})},6215:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Socket=void 0;const n=s(5978),i=s(9936),o=s(345),a=s(4544),u=r(s(6005)),c=s(8677),d=s(174),l=(0,u.default)("engine.io-client:socket");class h extends c.Emitter{constructor(e,t={}){super(),e&&"object"==typeof e&&(t=e,e=null),e?(e=(0,a.parse)(e),t.hostname=e.host,t.secure="https"===e.protocol||"wss"===e.protocol,t.port=e.port,e.query&&(t.query=e.query)):t.host&&(t.hostname=(0,a.parse)(t.host).host),(0,i.installTimerFunctions)(this,t),this.secure=null!=t.secure?t.secure:"undefined"!=typeof location&&"https:"===location.protocol,t.hostname&&!t.port&&(t.port=this.secure?"443":"80"),this.hostname=t.hostname||("undefined"!=typeof location?location.hostname:"localhost"),this.port=t.port||("undefined"!=typeof location&&location.port?location.port:this.secure?"443":"80"),this.transports=t.transports||["polling","websocket"],this.readyState="",this.writeBuffer=[],this.prevBufferLen=0,this.opts=Object.assign({path:"/engine.io",agent:!1,withCredentials:!1,upgrade:!0,timestampParam:"t",rememberUpgrade:!1,rejectUnauthorized:!0,perMessageDeflate:{threshold:1024},transportOptions:{},closeOnBeforeunload:!0},t),this.opts.path=this.opts.path.replace(/\/$/,"")+"/","string"==typeof this.opts.query&&(this.opts.query=(0,o.decode)(this.opts.query)),this.id=null,this.upgrades=null,this.pingInterval=null,this.pingTimeout=null,this.pingTimeoutTimer=null,"function"==typeof addEventListener&&(this.opts.closeOnBeforeunload&&addEventListener("beforeunload",(()=>{this.transport&&(this.transport.removeAllListeners(),this.transport.close())}),!1),"localhost"!==this.hostname&&(this.offlineEventListener=()=>{this.onClose("transport close",{description:"network connection lost"})},addEventListener("offline",this.offlineEventListener,!1))),this.open()}createTransport(e){l('creating transport "%s"',e);const t=Object.assign({},this.opts.query);t.EIO=d.protocol,t.transport=e,this.id&&(t.sid=this.id);const s=Object.assign({},this.opts.transportOptions[e],this.opts,{query:t,socket:this,hostname:this.hostname,secure:this.secure,port:this.port});return l("options: %j",s),new n.transports[e](s)}open(){let e;if(this.opts.rememberUpgrade&&h.priorWebsocketSuccess&&-1!==this.transports.indexOf("websocket"))e="websocket";else{if(0===this.transports.length)return void this.setTimeoutFn((()=>{this.emitReserved("error","No transports available")}),0);e=this.transports[0]}this.readyState="opening";try{e=this.createTransport(e)}catch(e){return l("error while creating transport: %s",e),this.transports.shift(),void this.open()}e.open(),this.setTransport(e)}setTransport(e){l("setting transport %s",e.name),this.transport&&(l("clearing existing transport %s",this.transport.name),this.transport.removeAllListeners()),this.transport=e,e.on("drain",this.onDrain.bind(this)).on("packet",this.onPacket.bind(this)).on("error",this.onError.bind(this)).on("close",(e=>this.onClose("transport close",e)))}probe(e){l('probing transport "%s"',e);let t=this.createTransport(e),s=!1;h.priorWebsocketSuccess=!1;const r=()=>{s||(l('probe transport "%s" opened',e),t.send([{type:"ping",data:"probe"}]),t.once("packet",(r=>{if(!s)if("pong"===r.type&&"probe"===r.data){if(l('probe transport "%s" pong',e),this.upgrading=!0,this.emitReserved("upgrading",t),!t)return;h.priorWebsocketSuccess="websocket"===t.name,l('pausing current transport "%s"',this.transport.name),this.transport.pause((()=>{s||"closed"!==this.readyState&&(l("changing transport and sending upgrade packet"),c(),this.setTransport(t),t.send([{type:"upgrade"}]),this.emitReserved("upgrade",t),t=null,this.upgrading=!1,this.flush())}))}else{l('probe transport "%s" failed',e);const s=new Error("probe error");s.transport=t.name,this.emitReserved("upgradeError",s)}})))};function n(){s||(s=!0,c(),t.close(),t=null)}const i=s=>{const r=new Error("probe error: "+s);r.transport=t.name,n(),l('probe transport "%s" failed because of error: %s',e,s),this.emitReserved("upgradeError",r)};function o(){i("transport closed")}function a(){i("socket closed")}function u(e){t&&e.name!==t.name&&(l('"%s" works - aborting "%s"',e.name,t.name),n())}const c=()=>{t.removeListener("open",r),t.removeListener("error",i),t.removeListener("close",o),this.off("close",a),this.off("upgrading",u)};t.once("open",r),t.once("error",i),t.once("close",o),this.once("close",a),this.once("upgrading",u),t.open()}onOpen(){if(l("socket open"),this.readyState="open",h.priorWebsocketSuccess="websocket"===this.transport.name,this.emitReserved("open"),this.flush(),"open"===this.readyState&&this.opts.upgrade&&this.transport.pause){l("starting upgrade probes");let e=0;const t=this.upgrades.length;for(;e<t;e++)this.probe(this.upgrades[e])}}onPacket(e){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState)switch(l('socket receive: type "%s", data "%s"',e.type,e.data),this.emitReserved("packet",e),this.emitReserved("heartbeat"),e.type){case"open":this.onHandshake(JSON.parse(e.data));break;case"ping":this.resetPingTimeout(),this.sendPacket("pong"),this.emitReserved("ping"),this.emitReserved("pong");break;case"error":const t=new Error("server error");t.code=e.data,this.onError(t);break;case"message":this.emitReserved("data",e.data),this.emitReserved("message",e.data)}else l('packet received with socket readyState "%s"',this.readyState)}onHandshake(e){this.emitReserved("handshake",e),this.id=e.sid,this.transport.query.sid=e.sid,this.upgrades=this.filterUpgrades(e.upgrades),this.pingInterval=e.pingInterval,this.pingTimeout=e.pingTimeout,this.maxPayload=e.maxPayload,this.onOpen(),"closed"!==this.readyState&&this.resetPingTimeout()}resetPingTimeout(){this.clearTimeoutFn(this.pingTimeoutTimer),this.pingTimeoutTimer=this.setTimeoutFn((()=>{this.onClose("ping timeout")}),this.pingInterval+this.pingTimeout),this.opts.autoUnref&&this.pingTimeoutTimer.unref()}onDrain(){this.writeBuffer.splice(0,this.prevBufferLen),this.prevBufferLen=0,0===this.writeBuffer.length?this.emitReserved("drain"):this.flush()}flush(){if("closed"!==this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length){const e=this.getWritablePackets();l("flushing %d packets in socket",e.length),this.transport.send(e),this.prevBufferLen=e.length,this.emitReserved("flush")}}getWritablePackets(){if(!(this.maxPayload&&"polling"===this.transport.name&&this.writeBuffer.length>1))return this.writeBuffer;let e=1;for(let t=0;t<this.writeBuffer.length;t++){const s=this.writeBuffer[t].data;if(s&&(e+=(0,i.byteLength)(s)),t>0&&e>this.maxPayload)return l("only send %d out of %d packets",t,this.writeBuffer.length),this.writeBuffer.slice(0,t);e+=2}return l("payload size is %d (max: %d)",e,this.maxPayload),this.writeBuffer}write(e,t,s){return this.sendPacket("message",e,t,s),this}send(e,t,s){return this.sendPacket("message",e,t,s),this}sendPacket(e,t,s,r){if("function"==typeof t&&(r=t,t=void 0),"function"==typeof s&&(r=s,s=null),"closing"===this.readyState||"closed"===this.readyState)return;(s=s||{}).compress=!1!==s.compress;const n={type:e,data:t,options:s};this.emitReserved("packetCreate",n),this.writeBuffer.push(n),r&&this.once("flush",r),this.flush()}close(){const e=()=>{this.onClose("forced close"),l("socket closing - telling transport to close"),this.transport.close()},t=()=>{this.off("upgrade",t),this.off("upgradeError",t),e()},s=()=>{this.once("upgrade",t),this.once("upgradeError",t)};return"opening"!==this.readyState&&"open"!==this.readyState||(this.readyState="closing",this.writeBuffer.length?this.once("drain",(()=>{this.upgrading?s():e()})):this.upgrading?s():e()),this}onError(e){l("socket error %j",e),h.priorWebsocketSuccess=!1,this.emitReserved("error",e),this.onClose("transport error",e)}onClose(e,t){"opening"!==this.readyState&&"open"!==this.readyState&&"closing"!==this.readyState||(l('socket close with reason: "%s"',e),this.clearTimeoutFn(this.pingTimeoutTimer),this.transport.removeAllListeners("close"),this.transport.close(),this.transport.removeAllListeners(),"function"==typeof removeEventListener&&removeEventListener("offline",this.offlineEventListener,!1),this.readyState="closed",this.id=null,this.emitReserved("close",e,t),this.writeBuffer=[],this.prevBufferLen=0)}filterUpgrades(e){const t=[];let s=0;const r=e.length;for(;s<r;s++)~this.transports.indexOf(e[s])&&t.push(e[s]);return t}}t.Socket=h,h.protocol=d.protocol},269:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Transport=void 0;const n=s(174),i=s(8677),o=s(9936),a=(0,r(s(6005)).default)("engine.io-client:transport");class u extends Error{constructor(e,t,s){super(e),this.description=t,this.context=s,this.type="TransportError"}}class c extends i.Emitter{constructor(e){super(),this.writable=!1,(0,o.installTimerFunctions)(this,e),this.opts=e,this.query=e.query,this.readyState="",this.socket=e.socket}onError(e,t,s){return super.emitReserved("error",new u(e,t,s)),this}open(){return"closed"!==this.readyState&&""!==this.readyState||(this.readyState="opening",this.doOpen()),this}close(){return"opening"!==this.readyState&&"open"!==this.readyState||(this.doClose(),this.onClose()),this}send(e){"open"===this.readyState?this.write(e):a("transport is not open, discarding packets")}onOpen(){this.readyState="open",this.writable=!0,super.emitReserved("open")}onData(e){const t=(0,n.decodePacket)(e,this.socket.binaryType);this.onPacket(t)}onPacket(e){super.emitReserved("packet",e)}onClose(e){this.readyState="closed",super.emitReserved("close",e)}}t.Transport=c},5978:(e,t,s)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.transports=void 0;const r=s(5396),n=s(1082);t.transports={websocket:n.WS,polling:r.Polling}},5396:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Request=t.Polling=void 0;const n=s(269),i=r(s(6005)),o=s(6796),a=s(345),u=s(174),c=s(1356),d=s(8677),l=s(9936),h=s(7759),p=(0,i.default)("engine.io-client:polling");function f(){}const T=null!=new c.XHR({xdomain:!1}).responseType;class E extends n.Transport{constructor(e){if(super(e),this.polling=!1,"undefined"!=typeof location){const t="https:"===location.protocol;let s=location.port;s||(s=t?"443":"80"),this.xd="undefined"!=typeof location&&e.hostname!==location.hostname||s!==e.port,this.xs=e.secure!==t}const t=e&&e.forceBase64;this.supportsBinary=T&&!t}get name(){return"polling"}doOpen(){this.poll()}pause(e){this.readyState="pausing";const t=()=>{p("paused"),this.readyState="paused",e()};if(this.polling||!this.writable){let e=0;this.polling&&(p("we are currently polling - waiting to pause"),e++,this.once("pollComplete",(function(){p("pre-pause polling complete"),--e||t()}))),this.writable||(p("we are currently writing - waiting to pause"),e++,this.once("drain",(function(){p("pre-pause writing complete"),--e||t()})))}else t()}poll(){p("polling"),this.polling=!0,this.doPoll(),this.emitReserved("poll")}onData(e){p("polling got data %s",e),(0,u.decodePayload)(e,this.socket.binaryType).forEach((e=>{if("opening"===this.readyState&&"open"===e.type&&this.onOpen(),"close"===e.type)return this.onClose({description:"transport closed by the server"}),!1;this.onPacket(e)})),"closed"!==this.readyState&&(this.polling=!1,this.emitReserved("pollComplete"),"open"===this.readyState?this.poll():p('ignoring poll - transport state "%s"',this.readyState))}doClose(){const e=()=>{p("writing close packet"),this.write([{type:"close"}])};"open"===this.readyState?(p("transport open - closing"),e()):(p("transport not open - deferring close"),this.once("open",e))}write(e){this.writable=!1,(0,u.encodePayload)(e,(e=>{this.doWrite(e,(()=>{this.writable=!0,this.emitReserved("drain")}))}))}uri(){let e=this.query||{};const t=this.opts.secure?"https":"http";let s="";!1!==this.opts.timestampRequests&&(e[this.opts.timestampParam]=(0,o.yeast)()),this.supportsBinary||e.sid||(e.b64=1),this.opts.port&&("https"===t&&443!==Number(this.opts.port)||"http"===t&&80!==Number(this.opts.port))&&(s=":"+this.opts.port);const r=(0,a.encode)(e);return t+"://"+(-1!==this.opts.hostname.indexOf(":")?"["+this.opts.hostname+"]":this.opts.hostname)+s+this.opts.path+(r.length?"?"+r:"")}request(e={}){return Object.assign(e,{xd:this.xd,xs:this.xs},this.opts),new _(this.uri(),e)}doWrite(e,t){const s=this.request({method:"POST",data:e});s.on("success",t),s.on("error",((e,t)=>{this.onError("xhr post error",e,t)}))}doPoll(){p("xhr poll");const e=this.request();e.on("data",this.onData.bind(this)),e.on("error",((e,t)=>{this.onError("xhr poll error",e,t)})),this.pollXhr=e}}t.Polling=E;class _ extends d.Emitter{constructor(e,t){super(),(0,l.installTimerFunctions)(this,t),this.opts=t,this.method=t.method||"GET",this.uri=e,this.async=!1!==t.async,this.data=void 0!==t.data?t.data:null,this.create()}create(){const e=(0,l.pick)(this.opts,"agent","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","autoUnref");e.xdomain=!!this.opts.xd,e.xscheme=!!this.opts.xs;const t=this.xhr=new c.XHR(e);try{p("xhr open %s: %s",this.method,this.uri),t.open(this.method,this.uri,this.async);try{if(this.opts.extraHeaders){t.setDisableHeaderCheck&&t.setDisableHeaderCheck(!0);for(let e in this.opts.extraHeaders)this.opts.extraHeaders.hasOwnProperty(e)&&t.setRequestHeader(e,this.opts.extraHeaders[e])}}catch(e){}if("POST"===this.method)try{t.setRequestHeader("Content-type","text/plain;charset=UTF-8")}catch(e){}try{t.setRequestHeader("Accept","*/*")}catch(e){}"withCredentials"in t&&(t.withCredentials=this.opts.withCredentials),this.opts.requestTimeout&&(t.timeout=this.opts.requestTimeout),t.onreadystatechange=()=>{4===t.readyState&&(200===t.status||1223===t.status?this.onLoad():this.setTimeoutFn((()=>{this.onError("number"==typeof t.status?t.status:0)}),0))},p("xhr data %s",this.data),t.send(this.data)}catch(e){return void this.setTimeoutFn((()=>{this.onError(e)}),0)}"undefined"!=typeof document&&(this.index=_.requestsCount++,_.requests[this.index]=this)}onError(e){this.emitReserved("error",e,this.xhr),this.cleanup(!0)}cleanup(e){if(void 0!==this.xhr&&null!==this.xhr){if(this.xhr.onreadystatechange=f,e)try{this.xhr.abort()}catch(e){}"undefined"!=typeof document&&delete _.requests[this.index],this.xhr=null}}onLoad(){const e=this.xhr.responseText;null!==e&&(this.emitReserved("data",e),this.emitReserved("success"),this.cleanup())}abort(){this.cleanup()}}if(t.Request=_,_.requestsCount=0,_.requests={},"undefined"!=typeof document)if("function"==typeof attachEvent)attachEvent("onunload",g);else if("function"==typeof addEventListener){const e="onpagehide"in h.globalThisShim?"pagehide":"unload";addEventListener(e,g,!1)}function g(){for(let e in _.requests)_.requests.hasOwnProperty(e)&&_.requests[e].abort()}},8087:(e,t,s)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.defaultBinaryType=t.usingBrowserWebSocket=t.WebSocket=t.nextTick=void 0;const r=s(7759);t.nextTick="function"==typeof Promise&&"function"==typeof Promise.resolve?e=>Promise.resolve().then(e):(e,t)=>t(e,0),t.WebSocket=r.globalThisShim.WebSocket||r.globalThisShim.MozWebSocket,t.usingBrowserWebSocket=!0,t.defaultBinaryType="arraybuffer"},1082:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.WS=void 0;const n=s(269),i=s(345),o=s(6796),a=s(9936),u=s(8087),c=r(s(6005)),d=s(174),l=(0,c.default)("engine.io-client:websocket"),h="undefined"!=typeof navigator&&"string"==typeof navigator.product&&"reactnative"===navigator.product.toLowerCase();class p extends n.Transport{constructor(e){super(e),this.supportsBinary=!e.forceBase64}get name(){return"websocket"}doOpen(){if(!this.check())return;const e=this.uri(),t=this.opts.protocols,s=h?{}:(0,a.pick)(this.opts,"agent","perMessageDeflate","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","localAddress","protocolVersion","origin","maxPayload","family","checkServerIdentity");this.opts.extraHeaders&&(s.headers=this.opts.extraHeaders);try{this.ws=u.usingBrowserWebSocket&&!h?t?new u.WebSocket(e,t):new u.WebSocket(e):new u.WebSocket(e,t,s)}catch(e){return this.emitReserved("error",e)}this.ws.binaryType=this.socket.binaryType||u.defaultBinaryType,this.addEventListeners()}addEventListeners(){this.ws.onopen=()=>{this.opts.autoUnref&&this.ws._socket.unref(),this.onOpen()},this.ws.onclose=e=>this.onClose({description:"websocket connection closed",context:e}),this.ws.onmessage=e=>this.onData(e.data),this.ws.onerror=e=>this.onError("websocket error",e)}write(e){this.writable=!1;for(let t=0;t<e.length;t++){const s=e[t],r=t===e.length-1;(0,d.encodePacket)(s,this.supportsBinary,(e=>{const t={};!u.usingBrowserWebSocket&&(s.options&&(t.compress=s.options.compress),this.opts.perMessageDeflate)&&("string"==typeof e?Buffer.byteLength(e):e.length)<this.opts.perMessageDeflate.threshold&&(t.compress=!1);try{u.usingBrowserWebSocket?this.ws.send(e):this.ws.send(e,t)}catch(e){l("websocket closed before onclose event")}r&&(0,u.nextTick)((()=>{this.writable=!0,this.emitReserved("drain")}),this.setTimeoutFn)}))}}doClose(){void 0!==this.ws&&(this.ws.close(),this.ws=null)}uri(){let e=this.query||{};const t=this.opts.secure?"wss":"ws";let s="";this.opts.port&&("wss"===t&&443!==Number(this.opts.port)||"ws"===t&&80!==Number(this.opts.port))&&(s=":"+this.opts.port),this.opts.timestampRequests&&(e[this.opts.timestampParam]=(0,o.yeast)()),this.supportsBinary||(e.b64=1);const r=(0,i.encode)(e);return t+"://"+(-1!==this.opts.hostname.indexOf(":")?"["+this.opts.hostname+"]":this.opts.hostname)+s+this.opts.path+(r.length?"?"+r:"")}check(){return!!u.WebSocket}}t.WS=p},1356:(e,t,s)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.XHR=void 0;const r=s(5778),n=s(7759);t.XHR=function(e){const t=e.xdomain;try{if("undefined"!=typeof XMLHttpRequest&&(!t||r.hasCORS))return new XMLHttpRequest}catch(e){}if(!t)try{return new(n.globalThisShim[["Active"].concat("Object").join("X")])("Microsoft.XMLHTTP")}catch(e){}}},9936:(e,t,s)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.byteLength=t.installTimerFunctions=t.pick=void 0;const r=s(7759);t.pick=function(e,...t){return t.reduce(((t,s)=>(e.hasOwnProperty(s)&&(t[s]=e[s]),t)),{})};const n=setTimeout,i=clearTimeout;t.installTimerFunctions=function(e,t){t.useNativeTimers?(e.setTimeoutFn=n.bind(r.globalThisShim),e.clearTimeoutFn=i.bind(r.globalThisShim)):(e.setTimeoutFn=setTimeout.bind(r.globalThisShim),e.clearTimeoutFn=clearTimeout.bind(r.globalThisShim))},t.byteLength=function(e){return"string"==typeof e?function(e){let t=0,s=0;for(let r=0,n=e.length;r<n;r++)t=e.charCodeAt(r),t<128?s+=1:t<2048?s+=2:t<55296||t>=57344?s+=3:(r++,s+=4);return s}(e):Math.ceil(1.33*(e.byteLength||e.size))}},7695:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ERROR_PACKET=t.PACKET_TYPES_REVERSE=t.PACKET_TYPES=void 0;const s=Object.create(null);t.PACKET_TYPES=s,s.open="0",s.close="1",s.ping="2",s.pong="3",s.message="4",s.upgrade="5",s.noop="6";const r=Object.create(null);t.PACKET_TYPES_REVERSE=r,Object.keys(s).forEach((e=>{r[s[e]]=e})),t.ERROR_PACKET={type:"error",data:"parser error"}},712:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.decode=t.encode=void 0;const s="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",r="undefined"==typeof Uint8Array?[]:new Uint8Array(256);for(let e=0;e<s.length;e++)r[s.charCodeAt(e)]=e;t.encode=e=>{let t,r=new Uint8Array(e),n=r.length,i="";for(t=0;t<n;t+=3)i+=s[r[t]>>2],i+=s[(3&r[t])<<4|r[t+1]>>4],i+=s[(15&r[t+1])<<2|r[t+2]>>6],i+=s[63&r[t+2]];return n%3==2?i=i.substring(0,i.length-1)+"=":n%3==1&&(i=i.substring(0,i.length-2)+"=="),i},t.decode=e=>{let t,s,n,i,o,a=.75*e.length,u=e.length,c=0;"="===e[e.length-1]&&(a--,"="===e[e.length-2]&&a--);const d=new ArrayBuffer(a),l=new Uint8Array(d);for(t=0;t<u;t+=4)s=r[e.charCodeAt(t)],n=r[e.charCodeAt(t+1)],i=r[e.charCodeAt(t+2)],o=r[e.charCodeAt(t+3)],l[c++]=s<<2|n>>4,l[c++]=(15&n)<<4|i>>2,l[c++]=(3&i)<<6|63&o;return d}},7204:(e,t,s)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=s(7695),n=s(712),i="function"==typeof ArrayBuffer,o=(e,t)=>{if(i){const s=(0,n.decode)(e);return a(s,t)}return{base64:!0,data:e}},a=(e,t)=>{switch(t){case"blob":return e instanceof ArrayBuffer?new Blob([e]):e;case"arraybuffer":default:return e}};t.default=(e,t)=>{if("string"!=typeof e)return{type:"message",data:a(e,t)};const s=e.charAt(0);return"b"===s?{type:"message",data:o(e.substring(1),t)}:r.PACKET_TYPES_REVERSE[s]?e.length>1?{type:r.PACKET_TYPES_REVERSE[s],data:e.substring(1)}:{type:r.PACKET_TYPES_REVERSE[s]}:r.ERROR_PACKET}},7389:(e,t,s)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=s(7695),n="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===Object.prototype.toString.call(Blob),i="function"==typeof ArrayBuffer,o=(e,t)=>{const s=new FileReader;return s.onload=function(){const e=s.result.split(",")[1];t("b"+e)},s.readAsDataURL(e)};t.default=({type:e,data:t},s,a)=>{return n&&t instanceof Blob?s?a(t):o(t,a):i&&(t instanceof ArrayBuffer||(u=t,"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(u):u&&u.buffer instanceof ArrayBuffer))?s?a(t):o(new Blob([t]),a):a(r.PACKET_TYPES[e]+(t||""));var u}},174:(e,t,s)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.decodePayload=t.decodePacket=t.encodePayload=t.encodePacket=t.protocol=void 0;const r=s(7389);t.encodePacket=r.default;const n=s(7204);t.decodePacket=n.default;const i=String.fromCharCode(30);t.encodePayload=(e,t)=>{const s=e.length,n=new Array(s);let o=0;e.forEach(((e,a)=>{(0,r.default)(e,!1,(e=>{n[a]=e,++o===s&&t(n.join(i))}))}))},t.decodePayload=(e,t)=>{const s=e.split(i),r=[];for(let e=0;e<s.length;e++){const i=(0,n.default)(s[e],t);if(r.push(i),"error"===i.type)break}return r},t.protocol=4},9438:(e,t,s)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.reconstructPacket=t.deconstructPacket=void 0;const r=s(446);function n(e,t){if(!e)return e;if(r.isBinary(e)){const s={_placeholder:!0,num:t.length};return t.push(e),s}if(Array.isArray(e)){const s=new Array(e.length);for(let r=0;r<e.length;r++)s[r]=n(e[r],t);return s}if("object"==typeof e&&!(e instanceof Date)){const s={};for(const r in e)Object.prototype.hasOwnProperty.call(e,r)&&(s[r]=n(e[r],t));return s}return e}function i(e,t){if(!e)return e;if(e&&e._placeholder)return t[e.num];if(Array.isArray(e))for(let s=0;s<e.length;s++)e[s]=i(e[s],t);else if("object"==typeof e)for(const s in e)Object.prototype.hasOwnProperty.call(e,s)&&(e[s]=i(e[s],t));return e}t.deconstructPacket=function(e){const t=[],s=e.data,r=e;return r.data=n(s,t),r.attachments=t.length,{packet:r,buffers:t}},t.reconstructPacket=function(e,t){return e.data=i(e.data,t),e.attachments=void 0,e}},8179:(e,t,s)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Decoder=t.Encoder=t.PacketType=t.protocol=void 0;const r=s(8677),n=s(9438),i=s(446),o=s(5787).default("socket.io-parser");var a;t.protocol=5,function(e){e[e.CONNECT=0]="CONNECT",e[e.DISCONNECT=1]="DISCONNECT",e[e.EVENT=2]="EVENT",e[e.ACK=3]="ACK",e[e.CONNECT_ERROR=4]="CONNECT_ERROR",e[e.BINARY_EVENT=5]="BINARY_EVENT",e[e.BINARY_ACK=6]="BINARY_ACK"}(a=t.PacketType||(t.PacketType={})),t.Encoder=class{constructor(e){this.replacer=e}encode(e){return o("encoding packet %j",e),e.type!==a.EVENT&&e.type!==a.ACK||!i.hasBinary(e)?[this.encodeAsString(e)]:(e.type=e.type===a.EVENT?a.BINARY_EVENT:a.BINARY_ACK,this.encodeAsBinary(e))}encodeAsString(e){let t=""+e.type;return e.type!==a.BINARY_EVENT&&e.type!==a.BINARY_ACK||(t+=e.attachments+"-"),e.nsp&&"/"!==e.nsp&&(t+=e.nsp+","),null!=e.id&&(t+=e.id),null!=e.data&&(t+=JSON.stringify(e.data,this.replacer)),o("encoded %j as %s",e,t),t}encodeAsBinary(e){const t=n.deconstructPacket(e),s=this.encodeAsString(t.packet),r=t.buffers;return r.unshift(s),r}};class u extends r.Emitter{constructor(e){super(),this.reviver=e}add(e){let t;if("string"==typeof e)t=this.decodeString(e),t.type===a.BINARY_EVENT||t.type===a.BINARY_ACK?(this.reconstructor=new c(t),0===t.attachments&&super.emitReserved("decoded",t)):super.emitReserved("decoded",t);else{if(!i.isBinary(e)&&!e.base64)throw new Error("Unknown type: "+e);if(!this.reconstructor)throw new Error("got binary data when not reconstructing a packet");t=this.reconstructor.takeBinaryData(e),t&&(this.reconstructor=null,super.emitReserved("decoded",t))}}decodeString(e){let t=0;const s={type:Number(e.charAt(0))};if(void 0===a[s.type])throw new Error("unknown packet type "+s.type);if(s.type===a.BINARY_EVENT||s.type===a.BINARY_ACK){const r=t+1;for(;"-"!==e.charAt(++t)&&t!=e.length;);const n=e.substring(r,t);if(n!=Number(n)||"-"!==e.charAt(t))throw new Error("Illegal attachments");s.attachments=Number(n)}if("/"===e.charAt(t+1)){const r=t+1;for(;++t&&","!==e.charAt(t)&&t!==e.length;);s.nsp=e.substring(r,t)}else s.nsp="/";const r=e.charAt(t+1);if(""!==r&&Number(r)==r){const r=t+1;for(;++t;){const s=e.charAt(t);if(null==s||Number(s)!=s){--t;break}if(t===e.length)break}s.id=Number(e.substring(r,t+1))}if(e.charAt(++t)){const r=this.tryParse(e.substr(t));if(!u.isPayloadValid(s.type,r))throw new Error("invalid payload");s.data=r}return o("decoded %s as %j",e,s),s}tryParse(e){try{return JSON.parse(e,this.reviver)}catch(e){return!1}}static isPayloadValid(e,t){switch(e){case a.CONNECT:return"object"==typeof t;case a.DISCONNECT:return void 0===t;case a.CONNECT_ERROR:return"string"==typeof t||"object"==typeof t;case a.EVENT:case a.BINARY_EVENT:return Array.isArray(t)&&t.length>0;case a.ACK:case a.BINARY_ACK:return Array.isArray(t)}}destroy(){this.reconstructor&&this.reconstructor.finishedReconstruction()}}t.Decoder=u;class c{constructor(e){this.packet=e,this.buffers=[],this.reconPack=e}takeBinaryData(e){if(this.buffers.push(e),this.buffers.length===this.reconPack.attachments){const e=n.reconstructPacket(this.reconPack,this.buffers);return this.finishedReconstruction(),e}return null}finishedReconstruction(){this.reconPack=null,this.buffers=[]}}},446:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.hasBinary=t.isBinary=void 0;const s="function"==typeof ArrayBuffer,r=Object.prototype.toString,n="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===r.call(Blob),i="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===r.call(File);function o(e){return s&&(e instanceof ArrayBuffer||(e=>"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(e):e.buffer instanceof ArrayBuffer)(e))||n&&e instanceof Blob||i&&e instanceof File}t.isBinary=o,t.hasBinary=function e(t,s){if(!t||"object"!=typeof t)return!1;if(Array.isArray(t)){for(let s=0,r=t.length;s<r;s++)if(e(t[s]))return!0;return!1}if(o(t))return!0;if(t.toJSON&&"function"==typeof t.toJSON&&1===arguments.length)return e(t.toJSON(),!0);for(const s in t)if(Object.prototype.hasOwnProperty.call(t,s)&&e(t[s]))return!0;return!1}},8677:(e,t,s)=>{"use strict";function r(e){if(e)return function(e){for(var t in r.prototype)e[t]=r.prototype[t];return e}(e)}s.r(t),s.d(t,{Emitter:()=>r}),r.prototype.on=r.prototype.addEventListener=function(e,t){return this._callbacks=this._callbacks||{},(this._callbacks["$"+e]=this._callbacks["$"+e]||[]).push(t),this},r.prototype.once=function(e,t){function s(){this.off(e,s),t.apply(this,arguments)}return s.fn=t,this.on(e,s),this},r.prototype.off=r.prototype.removeListener=r.prototype.removeAllListeners=r.prototype.removeEventListener=function(e,t){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var s,r=this._callbacks["$"+e];if(!r)return this;if(1==arguments.length)return delete this._callbacks["$"+e],this;for(var n=0;n<r.length;n++)if((s=r[n])===t||s.fn===t){r.splice(n,1);break}return 0===r.length&&delete this._callbacks["$"+e],this},r.prototype.emit=function(e){this._callbacks=this._callbacks||{};for(var t=new Array(arguments.length-1),s=this._callbacks["$"+e],r=1;r<arguments.length;r++)t[r-1]=arguments[r];if(s){r=0;for(var n=(s=s.slice(0)).length;r<n;++r)s[r].apply(this,t)}return this},r.prototype.emitReserved=r.prototype.emit,r.prototype.listeners=function(e){return this._callbacks=this._callbacks||{},this._callbacks["$"+e]||[]},r.prototype.hasListeners=function(e){return!!this.listeners(e).length}}},t={};function s(r){var n=t[r];if(void 0!==n)return n.exports;var i=t[r]={exports:{}};return e[r].call(i.exports,i,i.exports,s),i.exports}s.d=(e,t)=>{for(var r in t)s.o(t,r)&&!s.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),s.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s(4039)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,